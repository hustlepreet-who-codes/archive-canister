type Account = record { owner : principal; subaccount : opt vec nat8 };
type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};
type Block = Value;
type BlockIndex = nat;
type Burn = record {
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type DataCertificate = record { certificate : vec nat8; hash_tree : vec nat8 };
type GetArchivesArgs = record { from : opt principal };
type GetArchivesResult = vec record {
  end : nat;
  canister_id : principal;
  start : nat;
};
type GetBlocksArgs = vec record { start : nat; length : nat };
type GetBlocksResult = record {
  log_length : nat;
  blocks : vec record { id : nat; block : ICRC3Value };
  archived_blocks : vec record {
    args : GetBlocksArgs;
    callback : func (GetBlocksArgs) -> (GetBlocksResult) query;
  };
};
type ICRC3Value = variant {
  Int : int;
  Map : vec record { text; ICRC3Value };
  Nat : nat;
  Blob : vec nat8;
  Text : text;
  Array : vec ICRC3Value;
};
type Map = vec record { text; Value };
type Mint = record {
  to : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};
type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt vec nat8;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type Value = variant {
  Int : int;
  Map : Map;
  Nat : nat;
  Nat64 : nat64;
  Blob : vec nat8;
  Text : text;
  Array : vec Value;
};
service : (principal, nat64, opt nat64, opt nat64) -> {
  append_blocks : (vec vec nat8) -> ();
  get_blocks : (record { start : nat; length : nat }) -> (
      record { blocks : vec Block },
    ) query;
  get_transaction : (nat64) -> (opt Transaction) query;
  get_transactions : (record { start : nat; length : nat }) -> (
      record { transactions : vec Transaction },
    ) query;
  icrc3_get_archives : (GetArchivesArgs) -> (GetArchivesResult) query;
  icrc3_get_blocks : (GetBlocksArgs) -> (GetBlocksResult) query;
  icrc3_get_tip_certificate : () -> (opt DataCertificate) query;
  icrc3_supported_block_types : () -> (
      vec record { url : text; block_type : text },
    ) query;
  remaining_capacity : () -> (nat64) query;
}