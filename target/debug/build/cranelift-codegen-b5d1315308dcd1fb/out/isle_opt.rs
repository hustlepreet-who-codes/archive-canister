// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_opt.isle
// - src/opts/arithmetic.isle
// - src/opts/bitops.isle
// - src/opts/cprop.isle
// - src/opts/extends.isle
// - src/opts/icmp.isle
// - src/opts/remat.isle
// - src/opts/selects.isle
// - src/opts/spaceship.isle
// - src/opts/shifts.isle
// - src/opts/vector.isle
// - /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_int_lane(&mut self, arg0: Type) -> Option<u32>;
    fn dynamic_fp_lane(&mut self, arg0: Type) -> Option<u32>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    type inst_data_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, InstructionData)>;
    fn inst_data_etor(&mut self, arg0: Value, returns: &mut Self::inst_data_etor_returns) -> ();
    type inst_data_tupled_etor_returns: Default
        + IntoContextIter<Context = Self, Output = TypeAndInstructionData>;
    fn inst_data_tupled_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::inst_data_tupled_etor_returns,
    ) -> ();
    fn make_inst_ctor(&mut self, arg0: Type, arg1: &InstructionData) -> Value;
    fn value_array_2_ctor(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn value_array_3_ctor(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn remat(&mut self, arg0: Value) -> Value;
    fn subsume(&mut self, arg0: Value) -> Value;
    fn iconst_sextend_etor(&mut self, arg0: TypeAndInstructionData) -> Option<(Type, i64)>;
    type sextend_maybe_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn sextend_maybe_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::sextend_maybe_etor_returns,
    ) -> ();
    type uextend_maybe_etor_returns: Default
        + IntoContextIter<Context = Self, Output = (Type, Value)>;
    fn uextend_maybe_etor(
        &mut self,
        arg0: Value,
        returns: &mut Self::uextend_maybe_etor_returns,
    ) -> ();
    fn splat64(&mut self, arg0: u64) -> Constant;
    fn f32_from_uint(&mut self, arg0: u64) -> Ieee32;
    fn f64_from_uint(&mut self, arg0: u64) -> Ieee64;
    fn f32_from_sint(&mut self, arg0: i64) -> Ieee32;
    fn f64_from_sint(&mut self, arg0: i64) -> Ieee64;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 323.
    return v5;
}

// Generated as internal constructor for term eq.
pub fn constructor_eq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg1, arg2);
    // Rule at src/prelude_opt.isle line 30.
    return v4;
}

// Generated as internal constructor for term ne.
pub fn constructor_ne<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 31.
    return v4;
}

// Generated as internal constructor for term ult.
pub fn constructor_ult<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 32.
    return v4;
}

// Generated as internal constructor for term ule.
pub fn constructor_ule<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 33.
    return v4;
}

// Generated as internal constructor for term ugt.
pub fn constructor_ugt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 34.
    return v4;
}

// Generated as internal constructor for term uge.
pub fn constructor_uge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 35.
    return v4;
}

// Generated as internal constructor for term slt.
pub fn constructor_slt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 36.
    return v4;
}

// Generated as internal constructor for term sle.
pub fn constructor_sle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 37.
    return v4;
}

// Generated as internal constructor for term sgt.
pub fn constructor_sgt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg1, arg2);
    // Rule at src/prelude_opt.isle line 38.
    return v4;
}

// Generated as internal constructor for term sge.
pub fn constructor_sge<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg1, arg2);
    // Rule at src/prelude_opt.isle line 39.
    return v4;
}

// Generated as internal constructor for term spaceship_s.
pub fn constructor_spaceship_s<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_sgt(ctx, arg0, arg1, arg2);
    let v5 = constructor_slt(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src/prelude_opt.isle line 43.
    return v6;
}

// Generated as internal constructor for term spaceship_u.
pub fn constructor_spaceship_u<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = constructor_ugt(ctx, arg0, arg1, arg2);
    let v5 = constructor_ult(ctx, arg0, arg1, arg2);
    let v6 = constructor_isub(ctx, I8, v4, v5);
    // Rule at src/prelude_opt.isle line 46.
    return v6;
}

// Generated as internal constructor for term simplify.
pub fn constructor_simplify<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v5,
                args: ref v6,
            } => {
                match v5 {
                    &Opcode::Smin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1088 =
                                                            constructor_smin(ctx, v1025, v30, v27);
                                                        let v1089 =
                                                            constructor_splat(ctx, v2.0, v1088);
                                                        // Rule at src/opts/vector.isle line 55.
                                                        returns.extend(Some(v1089));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umin => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1090 =
                                                            constructor_umin(ctx, v1025, v30, v27);
                                                        let v1091 =
                                                            constructor_splat(ctx, v2.0, v1090);
                                                        // Rule at src/opts/vector.isle line 58.
                                                        returns.extend(Some(v1091));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1092 =
                                                            constructor_smax(ctx, v1025, v30, v27);
                                                        let v1093 =
                                                            constructor_splat(ctx, v2.0, v1092);
                                                        // Rule at src/opts/vector.isle line 61.
                                                        returns.extend(Some(v1093));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umax => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1094 =
                                                            constructor_umax(ctx, v1025, v30, v27);
                                                        let v1095 =
                                                            constructor_splat(ctx, v2.0, v1094);
                                                        // Rule at src/opts/vector.isle line 64.
                                                        returns.extend(Some(v1095));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Iadd => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iadd = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Iadd = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v118 = constructor_iadd(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v119 = constructor_iadd(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v120 = constructor_iadd(
                                                                    ctx, v2.0, v118, v119,
                                                                );
                                                                let v121 = C::subsume(ctx, v120);
                                                                // Rule at src/opts/arithmetic.isle line 135.
                                                                returns.extend(Some(v121));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v654,
                                                        imm: v655,
                                                    } => {
                                                        if let &Opcode::Iconst = v654 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Iadd = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v194,
                                                                                    imm: v195,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v194 {
                                                                                        let v656 = constructor_iadd(ctx, v2.0, v124.0, v106.0);
                                                                                        let v657 = constructor_iadd(ctx, v2.0, v124.1, v106.1);
                                                                                        let v658 = constructor_iadd(ctx, v2.0, v656, v657);
                                                                                        // Rule at src/opts/cprop.isle line 227.
                                                                                        returns.extend(Some(v658));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1025 = C::lane_type(ctx, v2.0);
                                                                let v1072 = constructor_iadd(
                                                                    ctx, v1025, v30, v27,
                                                                );
                                                                let v1073 = constructor_splat(
                                                                    ctx, v2.0, v1072,
                                                                );
                                                                // Rule at src/opts/vector.isle line 31.
                                                                returns.extend(Some(v1073));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v28 = constructor_isub(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/arithmetic.isle line 24.
                                                returns.extend(Some(v28));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        match v122 {
                                                            &Opcode::Iadd => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v194,
                                                                            imm: v195,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v194 {
                                                                                if v2.0 == v168.0 {
                                                                                    let v579 = constructor_iadd(ctx, v2.0, v124.1, v7.1);
                                                                                    let v580 = constructor_iadd(ctx, v2.0, v124.0, v579);
                                                                                    // Rule at src/opts/cprop.isle line 126.
                                                                                    returns.extend(Some(v580));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Isub => {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v585,
                                                                            imm: v586,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Iconst = v585 {
                                                                                if v2.0 == v128.0 {
                                                                                    let v587 = C::u64_from_imm64(ctx, v586);
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v597 = C::u64_add(ctx, v587, v16);
                                                                                    let v598 = C::imm64_masked(ctx, v2.0, v597);
                                                                                    let v599 = constructor_iconst(ctx, v2.0, v598);
                                                                                    let v600 = constructor_isub(ctx, v2.0, v599, v124.1);
                                                                                    // Rule at src/opts/cprop.isle line 152.
                                                                                    returns.extend(Some(v600));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v194,
                                                                            imm: v195,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v194 {
                                                                                if v2.0 == v168.0 {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v196 = C::u64_from_imm64(ctx, v195);
                                                                                    let v592 = C::u64_sub(ctx, v16, v196);
                                                                                    let v593 = C::imm64_masked(ctx, v2.0, v592);
                                                                                    let v594 = constructor_iconst(ctx, v2.0, v593);
                                                                                    let v596 = constructor_iadd(ctx, v2.0, v124.0, v594);
                                                                                    // Rule at src/opts/cprop.isle line 148.
                                                                                    returns.extend(Some(v596));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                if v2.0 == v19.0 {
                                                                    let v65 = constructor_ineg(
                                                                        ctx, v2.0, v30,
                                                                    );
                                                                    // Rule at src/opts/arithmetic.isle line 69.
                                                                    returns.extend(Some(v65));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v496 =
                                                                    C::u64_add(ctx, v24, v16);
                                                                let v497 = C::imm64_masked(
                                                                    ctx, v495, v496,
                                                                );
                                                                let v498 = constructor_iconst(
                                                                    ctx, v495, v497,
                                                                );
                                                                let v499 = C::subsume(ctx, v498);
                                                                // Rule at src/opts/cprop.isle line 3.
                                                                returns.extend(Some(v499));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 6.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Iadd = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Iadd = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v136 = constructor_iadd(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v137 = constructor_iadd(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v138 = constructor_iadd(
                                                                ctx, v2.0, v136, v137,
                                                            );
                                                            let v139 = C::subsume(ctx, v138);
                                                            // Rule at src/opts/arithmetic.isle line 137.
                                                            returns.extend(Some(v139));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Ineg = v29 {
                                        if v2.0 == v19.0 {
                                            let v31 = constructor_isub(ctx, v2.0, v7.1, v30);
                                            // Rule at src/opts/arithmetic.isle line 26.
                                            returns.extend(Some(v31));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v570 = constructor_iadd(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 95.
                                            returns.extend(Some(v570));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 4.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Isub => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1025 = C::lane_type(ctx, v2.0);
                                                                let v1074 = constructor_isub(
                                                                    ctx, v1025, v30, v27,
                                                                );
                                                                let v1075 = constructor_splat(
                                                                    ctx, v2.0, v1074,
                                                                );
                                                                // Rule at src/opts/vector.isle line 34.
                                                                returns.extend(Some(v1075));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let v44 = constructor_iadd(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/arithmetic.isle line 31.
                                                returns.extend(Some(v44));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    match v122 {
                                                        &Opcode::Iadd => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            if v2.0 == v168.0 {
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v196 = C::u64_from_imm64(ctx, v195);
                                                                                let v592 = C::u64_sub(ctx, v16, v196);
                                                                                let v593 = C::imm64_masked(ctx, v2.0, v592);
                                                                                let v594 = constructor_iconst(ctx, v2.0, v593);
                                                                                let v595 = constructor_isub(ctx, v2.0, v124.0, v594);
                                                                                // Rule at src/opts/cprop.isle line 144.
                                                                                returns.extend(Some(v595));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Isub => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v585,
                                                                        imm: v586,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v585 {
                                                                            if v2.0 == v128.0 {
                                                                                let v587 = C::u64_from_imm64(ctx, v586);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v588 = C::u64_sub(ctx, v587, v16);
                                                                                let v589 = C::imm64_masked(ctx, v2.0, v588);
                                                                                let v590 = constructor_iconst(ctx, v2.0, v589);
                                                                                let v591 = constructor_isub(ctx, v2.0, v590, v124.1);
                                                                                // Rule at src/opts/cprop.isle line 140.
                                                                                returns.extend(Some(v591));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            if v2.0 == v168.0 {
                                                                                let v196 = C::u64_from_imm64(ctx, v195);
                                                                                let v16 = C::u64_from_imm64(ctx, v15);
                                                                                let v581 = C::u64_add(ctx, v196, v16);
                                                                                let v582 = C::imm64_masked(ctx, v2.0, v581);
                                                                                let v583 = constructor_iconst(ctx, v2.0, v582);
                                                                                let v584 = constructor_isub(ctx, v2.0, v124.0, v583);
                                                                                // Rule at src/opts/cprop.isle line 136.
                                                                                returns.extend(Some(v584));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 13.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v500 =
                                                                    C::u64_sub(ctx, v24, v16);
                                                                let v501 = C::imm64_masked(
                                                                    ctx, v495, v500,
                                                                );
                                                                let v502 = constructor_iconst(
                                                                    ctx, v495, v501,
                                                                );
                                                                let v503 = C::subsume(ctx, v502);
                                                                // Rule at src/opts/cprop.isle line 9.
                                                                returns.extend(Some(v503));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 10.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v22,
                                imm: v23,
                            } = &v19.1
                            {
                                if let &Opcode::Iconst = v22 {
                                    if v2.0 == v19.0 {
                                        let v24 = C::u64_from_imm64(ctx, v23);
                                        if v24 == 0x0 {
                                            let v25 = constructor_ineg(ctx, v2.0, v7.1);
                                            // Rule at src/opts/arithmetic.isle line 18.
                                            returns.extend(Some(v25));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v571 = constructor_isub(ctx, v2.0, v7.1, v7.0);
                                        let v572 = constructor_ineg(ctx, v2.0, v571);
                                        // Rule at src/opts/cprop.isle line 100.
                                        returns.extend(Some(v572));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                    let v820 = C::remat(ctx, arg0);
                                    // Rule at src/opts/remat.isle line 8.
                                    returns.extend(Some(v820));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src/opts/arithmetic.isle line 50.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS {
                                    return;
                                }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                let v615 = C::i64_neg(ctx, v61.1);
                                let v616 = C::i64_as_u64(ctx, v615);
                                let v617 = C::i64_as_u64(ctx, v61.1);
                                let v618 = C::u64_lt(ctx, v616, v617);
                                if v618 == true {
                                    if v2.0 == v61.0 {
                                        let v619 = C::imm64_masked(ctx, v2.0, v616);
                                        let v620 = constructor_iconst(ctx, v2.0, v619);
                                        let v621 = constructor_iadd(ctx, v2.0, v7.0, v620);
                                        // Rule at src/opts/cprop.isle line 181.
                                        returns.extend(Some(v621));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Imul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Imul = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Imul = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v140 = constructor_imul(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v141 = constructor_imul(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v142 = constructor_imul(
                                                                    ctx, v2.0, v140, v141,
                                                                );
                                                                let v143 = C::subsume(ctx, v142);
                                                                // Rule at src/opts/arithmetic.isle line 140.
                                                                returns.extend(Some(v143));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v654,
                                                        imm: v655,
                                                    } => {
                                                        if let &Opcode::Iconst = v654 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Imul = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v194,
                                                                                    imm: v195,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v194 {
                                                                                        let v659 = constructor_imul(ctx, v2.0, v124.0, v106.0);
                                                                                        let v660 = constructor_imul(ctx, v2.0, v124.1, v106.1);
                                                                                        let v661 = constructor_imul(ctx, v2.0, v659, v660);
                                                                                        // Rule at src/opts/cprop.isle line 231.
                                                                                        returns.extend(Some(v661));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Splat = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v1025 = C::lane_type(ctx, v2.0);
                                                                let v1076 = constructor_imul(
                                                                    ctx, v1025, v30, v27,
                                                                );
                                                                let v1077 = constructor_splat(
                                                                    ctx, v2.0, v1076,
                                                                );
                                                                // Rule at src/opts/vector.isle line 37.
                                                                returns.extend(Some(v1077));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Ineg = v29 {
                                                            if v2.0 == v19.0 {
                                                                let v48 = constructor_imul(
                                                                    ctx, v2.0, v30, v27,
                                                                );
                                                                let v49 = C::subsume(ctx, v48);
                                                                // Rule at src/opts/arithmetic.isle line 38.
                                                                returns.extend(Some(v49));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        match v16 {
                                            0x0 => {
                                                if v2.0 == v11.0 {
                                                    let v57 = C::subsume(ctx, v7.1);
                                                    // Rule at src/opts/arithmetic.isle line 59.
                                                    returns.extend(Some(v57));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                if v2.0 == v11.0 {
                                                    let v17 = C::subsume(ctx, v7.0);
                                                    // Rule at src/opts/arithmetic.isle line 53.
                                                    returns.extend(Some(v17));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            0x2 => {
                                                let v73 = constructor_iadd(ctx, v2.0, v7.0, v7.0);
                                                // Rule at src/opts/arithmetic.isle line 92.
                                                returns.extend(Some(v73));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Imul = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            if v2.0 == v168.0 {
                                                                                let v601 = constructor_imul(ctx, v2.0, v124.1, v7.1);
                                                                                let v602 = constructor_imul(ctx, v2.0, v124.0, v601);
                                                                                // Rule at src/opts/cprop.isle line 157.
                                                                                returns.extend(Some(v602));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v494 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v495) = v494 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v495 {
                                                                    let v24 =
                                                                        C::u64_from_imm64(ctx, v23);
                                                                    let v504 =
                                                                        C::u64_mul(ctx, v24, v16);
                                                                    let v505 = C::imm64_masked(
                                                                        ctx, v495, v504,
                                                                    );
                                                                    let v506 = constructor_iconst(
                                                                        ctx, v495, v505,
                                                                    );
                                                                    let v507 =
                                                                        C::subsume(ctx, v506);
                                                                    // Rule at src/opts/cprop.isle line 15.
                                                                    returns.extend(Some(v507));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v74 = C::imm64_power_of_two(ctx, v15);
                                        if let Some(v75) = v74 {
                                            let v76 = C::imm64(ctx, v75);
                                            let v77 = constructor_iconst(ctx, v2.0, v76);
                                            let v78 = constructor_ishl(ctx, v2.0, v7.0, v77);
                                            // Rule at src/opts/arithmetic.isle line 99.
                                            returns.extend(Some(v78));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Imul = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Imul = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v144 = constructor_imul(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v145 = constructor_imul(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v146 = constructor_imul(
                                                                ctx, v2.0, v144, v145,
                                                            );
                                                            let v147 = C::subsume(ctx, v146);
                                                            // Rule at src/opts/arithmetic.isle line 142.
                                                            returns.extend(Some(v147));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        let v79 = C::imm64_power_of_two(ctx, v23);
                                        if let Some(v80) = v79 {
                                            let v81 = C::imm64(ctx, v80);
                                            let v82 = constructor_iconst(ctx, v2.0, v81);
                                            let v83 = constructor_ishl(ctx, v2.0, v7.1, v82);
                                            // Rule at src/opts/arithmetic.isle line 101.
                                            returns.extend(Some(v83));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        if v2.0 == v19.0 {
                                            let v573 = constructor_imul(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 103.
                                            returns.extend(Some(v573));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v64 = constructor_ineg(ctx, v2.0, v7.0);
                                        // Rule at src/opts/arithmetic.isle line 65.
                                        returns.extend(Some(v64));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Umulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1080 = constructor_umulhi(
                                                            ctx, v1025, v30, v27,
                                                        );
                                                        let v1081 =
                                                            constructor_splat(ctx, v2.0, v1080);
                                                        // Rule at src/opts/vector.isle line 43.
                                                        returns.extend(Some(v1081));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Smulhi => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Splat = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Splat = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v1025 = C::lane_type(ctx, v2.0);
                                                        let v1078 = constructor_smulhi(
                                                            ctx, v1025, v30, v27,
                                                        );
                                                        let v1079 =
                                                            constructor_splat(ctx, v2.0, v1078);
                                                        // Rule at src/opts/vector.isle line 40.
                                                        returns.extend(Some(v1079));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Udiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 83.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v494 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v495) = v494 {
                                        if v11.0 == v495 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v513 = C::u64_udiv(ctx, v24, v16);
                                                        if let Some(v514) = v513 {
                                                            if v11.0 == v19.0 {
                                                                let v515 = C::imm64_masked(
                                                                    ctx, v495, v514,
                                                                );
                                                                let v516 = constructor_iconst(
                                                                    ctx, v495, v515,
                                                                );
                                                                let v517 = C::subsume(ctx, v516);
                                                                // Rule at src/opts/cprop.isle line 28.
                                                                returns.extend(Some(v517));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sdiv => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v14,
                                imm: v15,
                            } = &v11.1
                            {
                                if let &Opcode::Iconst = v14 {
                                    let v16 = C::u64_from_imm64(ctx, v15);
                                    if v16 == 0x1 {
                                        if v2.0 == v11.0 {
                                            let v17 = C::subsume(ctx, v7.0);
                                            // Rule at src/opts/arithmetic.isle line 79.
                                            returns.extend(Some(v17));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    let v494 = C::fits_in_64(ctx, v2.0);
                                    if let Some(v495) = v494 {
                                        if v11.0 == v495 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v24 = C::u64_from_imm64(ctx, v23);
                                                        let v508 = C::u64_sdiv(ctx, v24, v16);
                                                        if let Some(v509) = v508 {
                                                            if v11.0 == v19.0 {
                                                                let v510 = C::imm64_masked(
                                                                    ctx, v495, v509,
                                                                );
                                                                let v511 = constructor_iconst(
                                                                    ctx, v495, v510,
                                                                );
                                                                let v512 = C::subsume(ctx, v511);
                                                                // Rule at src/opts/cprop.isle line 21.
                                                                returns.extend(Some(v512));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Band => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Band = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Band = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v148 = constructor_band(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v149 = constructor_band(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v150 = constructor_band(
                                                                    ctx, v2.0, v148, v149,
                                                                );
                                                                let v151 = C::subsume(ctx, v150);
                                                                // Rule at src/opts/arithmetic.isle line 145.
                                                                returns.extend(Some(v151));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v654,
                                                        imm: v655,
                                                    } => {
                                                        if let &Opcode::Iconst = v654 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Band = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v194,
                                                                                    imm: v195,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v194 {
                                                                                        let v662 = constructor_band(ctx, v2.0, v124.0, v106.0);
                                                                                        let v663 = constructor_band(ctx, v2.0, v124.1, v106.1);
                                                                                        let v664 = constructor_band(ctx, v2.0, v662, v663);
                                                                                        // Rule at src/opts/cprop.isle line 235.
                                                                                        returns.extend(Some(v664));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v798,
                                    args: ref v799,
                                    cond: ref v800,
                                } => {
                                    if let &Opcode::Icmp = v798 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v768,
                                                        args: ref v769,
                                                        cond: ref v770,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Icmp = v768 {
                                                            let v804 = constructor_intcc_comparable(
                                                                ctx, v770, v800,
                                                            );
                                                            if let Some(v805) = v804 {
                                                                if v11.0 == v19.0 {
                                                                    let v771 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v769,
                                                                        );
                                                                    let v801 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v799,
                                                                        );
                                                                    if v771.0 == v801.0 {
                                                                        if v771.1 == v801.1 {
                                                                            let v806 = constructor_decompose_intcc(ctx, v770);
                                                                            let v807 = constructor_decompose_intcc(ctx, v800);
                                                                            let v808 = C::u64_and(
                                                                                ctx, v806, v807,
                                                                            );
                                                                            let v809 = constructor_compose_icmp(ctx, v495, v808, v805, v771.0, v771.1);
                                                                            // Rule at src/opts/icmp.isle line 128.
                                                                            returns
                                                                                .extend(Some(v809));
                                                                            if returns.len()
                                                                                >= MAX_ISLE_RETURNS
                                                                            {
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1062 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1063) = v1062 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1025 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1064 = constructor_band(
                                                                        ctx, v1025, v30, v27,
                                                                    );
                                                                    let v1065 = constructor_splat(
                                                                        ctx, v2.0, v1064,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 15.
                                                                    returns.extend(Some(v1065));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v55 =
                                                            constructor_iconst_u(ctx, v53, 0x0);
                                                        let v56 = C::subsume(ctx, v55);
                                                        // Rule at src/opts/bitops.isle line 35.
                                                        returns.extend(Some(v56));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v684 = C::value_type(ctx, v30);
                                                        let v719 = C::value_type(ctx, v27);
                                                        if v684 == v719 {
                                                            let v720 = constructor_band(
                                                                ctx, v684, v30, v27,
                                                            );
                                                            let v721 = constructor_uextend(
                                                                ctx, v2.0, v720,
                                                            );
                                                            // Rule at src/opts/extends.isle line 71.
                                                            returns.extend(Some(v721));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    if let &Opcode::Band = v122 {
                                                        if v2.0 == v11.0 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            if v2.0 == v168.0 {
                                                                                let v605 = constructor_band(ctx, v2.0, v124.1, v7.1);
                                                                                let v606 = constructor_band(ctx, v2.0, v124.0, v605);
                                                                                // Rule at src/opts/cprop.isle line 163.
                                                                                returns.extend(Some(v606));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::IntCompare {
                                                    opcode: ref v768,
                                                    args: ref v769,
                                                    cond: ref v770,
                                                } => {
                                                    if let &Opcode::Icmp = v768 {
                                                        let v16 = C::u64_from_imm64(ctx, v15);
                                                        if v16 == 0x1 {
                                                            let v52 = C::ty_int(ctx, v2.0);
                                                            if let Some(v53) = v52 {
                                                                // Rule at src/opts/icmp.isle line 39.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } => {
                                                    match v29 {
                                                        &Opcode::Uextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            if v16 == 0x1 {
                                                                let v52 = C::ty_int(ctx, v2.0);
                                                                if let Some(v53) = v52 {
                                                                    let mut v774 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v30, &mut v774,
                                                                    );
                                                                    let mut v774 =
                                                                        v774.into_context_iter();
                                                                    while let Some(v775) =
                                                                        v774.next(ctx)
                                                                    {
                                                                        if let &InstructionData::IntCompare {
                                                                            opcode: ref v778,
                                                                            args: ref v779,
                                                                            cond: ref v780,
                                                                        } = &v775.1 {
                                                                            if let &Opcode::Icmp = v778 {
                                                                                // Rule at src/opts/icmp.isle line 44.
                                                                                returns.extend(Some(v7.0));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            let v684 = C::value_type(ctx, v30);
                                                            let v685 = C::ty_mask(ctx, v684);
                                                            let v686 = C::u64_and(ctx, v16, v685);
                                                            let v687 = C::u64_eq(ctx, v685, v686);
                                                            if v687 == true {
                                                                // Rule at src/opts/extends.isle line 17.
                                                                returns.extend(Some(v7.0));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sextend => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v684 = C::value_type(ctx, v30);
                                                            let v685 = C::ty_mask(ctx, v684);
                                                            let v688 = C::u64_eq(ctx, v16, v685);
                                                            if v688 == true {
                                                                let v689 = constructor_uextend(
                                                                    ctx, v2.0, v30,
                                                                );
                                                                // Rule at src/opts/extends.isle line 23.
                                                                returns.extend(Some(v689));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v494 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v495) = v494 {
                                                            if v11.0 == v19.0 {
                                                                if v11.0 == v495 {
                                                                    let v24 =
                                                                        C::u64_from_imm64(ctx, v23);
                                                                    let v16 =
                                                                        C::u64_from_imm64(ctx, v15);
                                                                    let v522 =
                                                                        C::u64_and(ctx, v24, v16);
                                                                    let v523 = C::imm64_masked(
                                                                        ctx, v495, v522,
                                                                    );
                                                                    let v524 = constructor_iconst(
                                                                        ctx, v495, v523,
                                                                    );
                                                                    let v525 =
                                                                        C::subsume(ctx, v524);
                                                                    // Rule at src/opts/cprop.isle line 41.
                                                                    returns.extend(Some(v525));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v57 = C::subsume(ctx, v7.1);
                                                // Rule at src/opts/bitops.isle line 34.
                                                returns.extend(Some(v57));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 14.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Band = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Band = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v152 = constructor_band(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v153 = constructor_band(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v154 = constructor_band(
                                                                ctx, v2.0, v152, v153,
                                                            );
                                                            let v155 = C::subsume(ctx, v154);
                                                            // Rule at src/opts/arithmetic.isle line 147.
                                                            returns.extend(Some(v155));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                                    let v56 = C::subsume(ctx, v55);
                                                    // Rule at src/opts/bitops.isle line 36.
                                                    returns.extend(Some(v56));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v575 = constructor_band(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 110.
                                            returns.extend(Some(v575));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 12.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 29.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v17 = C::subsume(ctx, v7.0);
                                        // Rule at src/opts/bitops.isle line 30.
                                        returns.extend(Some(v17));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    match v104 {
                                        &Opcode::Band => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                match &v19.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } => {
                                                        if let &Opcode::Band = v122 {
                                                            let v869 = C::ty_vec128(ctx, v2.0);
                                                            if let Some(v870) = v869 {
                                                                if v11.0 == v19.0 {
                                                                    if v11.0 == v870 {
                                                                        let v106 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v105,
                                                                            );
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v874,
                                                                                arg: v875,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Bnot = v874 {
                                                                                    if v11.0 == v110.0 {
                                                                                        let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                        if v124.0 == v875 {
                                                                                            let v876 = constructor_bitselect(ctx, v870, v124.0, v124.1, v106.0);
                                                                                            // Rule at src/opts/selects.isle line 71.
                                                                                            returns.extend(Some(v876));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v875 {
                                                                                            let v878 = constructor_bitselect(ctx, v870, v124.1, v124.0, v106.0);
                                                                                            // Rule at src/opts/selects.isle line 73.
                                                                                            returns.extend(Some(v878));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let v124 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v123,
                                                                            );
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.0, &mut v127,
                                                                        );
                                                                        let mut v127 = v127
                                                                            .into_context_iter();
                                                                        while let Some(v128) =
                                                                            v127.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v164,
                                                                                arg: v165,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Bnot = v164 {
                                                                                    if v11.0 == v128.0 {
                                                                                        if v106.1 == v165 {
                                                                                            let v880 = constructor_bitselect(ctx, v870, v165, v106.0, v124.1);
                                                                                            // Rule at src/opts/selects.isle line 75.
                                                                                            returns.extend(Some(v880));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v165 {
                                                                                            let v879 = constructor_bitselect(ctx, v870, v165, v106.1, v124.1);
                                                                                            // Rule at src/opts/selects.isle line 74.
                                                                                            returns.extend(Some(v879));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.1, &mut v167,
                                                                        );
                                                                        let mut v167 = v167
                                                                            .into_context_iter();
                                                                        while let Some(v168) =
                                                                            v167.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v171,
                                                                                arg: v172,
                                                                            } = &v168.1 {
                                                                                if let &Opcode::Bnot = v171 {
                                                                                    if v11.0 == v168.0 {
                                                                                        if v106.1 == v172 {
                                                                                            let v882 = constructor_bitselect(ctx, v870, v172, v106.0, v124.0);
                                                                                            // Rule at src/opts/selects.isle line 77.
                                                                                            returns.extend(Some(v882));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v106.0 == v172 {
                                                                                            let v881 = constructor_bitselect(ctx, v870, v172, v106.1, v124.0);
                                                                                            // Rule at src/opts/selects.isle line 76.
                                                                                            returns.extend(Some(v881));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v277 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.0, &mut v277,
                                                                        );
                                                                        let mut v277 = v277
                                                                            .into_context_iter();
                                                                        while let Some(v278) =
                                                                            v277.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v871,
                                                                                arg: v872,
                                                                            } = &v278.1 {
                                                                                if let &Opcode::Bnot = v871 {
                                                                                    if v11.0 == v278.0 {
                                                                                        if v124.0 == v872 {
                                                                                            let v873 = constructor_bitselect(ctx, v870, v124.0, v124.1, v106.1);
                                                                                            // Rule at src/opts/selects.isle line 70.
                                                                                            returns.extend(Some(v873));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                        if v124.1 == v872 {
                                                                                            let v877 = constructor_bitselect(ctx, v870, v124.1, v124.0, v106.1);
                                                                                            // Rule at src/opts/selects.isle line 72.
                                                                                            returns.extend(Some(v877));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::Unary {
                                                        opcode: ref v29,
                                                        arg: v30,
                                                    } => {
                                                        if let &Opcode::Bnot = v29 {
                                                            if v2.0 == v11.0 {
                                                                if v2.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    if v30 == v106.1 {
                                                                        let v193 = constructor_bor(
                                                                            ctx, v2.0, v106.0, v7.0,
                                                                        );
                                                                        // Rule at src/opts/bitops.isle line 59.
                                                                        returns.extend(Some(v193));
                                                                        if returns.len()
                                                                            >= MAX_ISLE_RETURNS
                                                                        {
                                                                            return;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bor = v122 {
                                                        let v106 =
                                                            C::unpack_value_array_2(ctx, v105);
                                                        let mut v109 =
                                                            C::inst_data_etor_returns::default();
                                                        C::inst_data_etor(ctx, v106.1, &mut v109);
                                                        let mut v109 = v109.into_context_iter();
                                                        while let Some(v110) = v109.next(ctx) {
                                                            match &v110.1 {
                                                                &InstructionData::Binary {
                                                                    opcode: ref v113,
                                                                    args: ref v114,
                                                                } => {
                                                                    match v113 {
                                                                        &Opcode::Bor => {
                                                                            if v2.0 == I64 {
                                                                                if v11.0 == I64 {
                                                                                    if v19.0 == I64
                                                                                    {
                                                                                        if v110.0
                                                                                            == I64
                                                                                        {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I64 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Bor = v131 {
                                                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                                                            C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                                            let mut v167 = v167.into_context_iter();
                                                                                                            while let Some(v168) = v167.next(ctx) {
                                                                                                                if v168.0 == I64 {
                                                                                                                    if let &InstructionData::Binary {
                                                                                                                        opcode: ref v249,
                                                                                                                        args: ref v250,
                                                                                                                    } = &v168.1 {
                                                                                                                        if let &Opcode::Bor = v249 {
                                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                                            let mut v242 = C::inst_data_etor_returns::default();
                                                                                                                            C::inst_data_etor(ctx, v133.1, &mut v242);
                                                                                                                            let mut v242 = v242.into_context_iter();
                                                                                                                            while let Some(v243) = v242.next(ctx) {
                                                                                                                                if v243.0 == I64 {
                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                        opcode: ref v333,
                                                                                                                                        args: ref v334,
                                                                                                                                    } = &v243.1 {
                                                                                                                                        if let &Opcode::Ishl = v333 {
                                                                                                                                            let v251 = C::unpack_value_array_2(ctx, v250);
                                                                                                                                            let mut v254 = C::inst_data_etor_returns::default();
                                                                                                                                            C::inst_data_etor(ctx, v251.0, &mut v254);
                                                                                                                                            let mut v254 = v254.into_context_iter();
                                                                                                                                            while let Some(v255) = v254.next(ctx) {
                                                                                                                                                if v255.0 == I64 {
                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                        opcode: ref v258,
                                                                                                                                                        args: ref v259,
                                                                                                                                                    } = &v255.1 {
                                                                                                                                                        if let &Opcode::Ishl = v258 {
                                                                                                                                                            let v260 = C::unpack_value_array_2(ctx, v259);
                                                                                                                                                            let mut v263 = C::inst_data_etor_returns::default();
                                                                                                                                                            C::inst_data_etor(ctx, v260.1, &mut v263);
                                                                                                                                                            let mut v263 = v263.into_context_iter();
                                                                                                                                                            while let Some(v264) = v263.next(ctx) {
                                                                                                                                                                if v264.0 == I64 {
                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                        opcode: ref v267,
                                                                                                                                                                        imm: v268,
                                                                                                                                                                    } = &v264.1 {
                                                                                                                                                                        if let &Opcode::Iconst = v267 {
                                                                                                                                                                            let v269 = C::u64_from_imm64(ctx, v268);
                                                                                                                                                                            if v269 == 0x18 {
                                                                                                                                                                                let mut v270 = C::inst_data_etor_returns::default();
                                                                                                                                                                                C::inst_data_etor(ctx, v251.1, &mut v270);
                                                                                                                                                                                let mut v270 = v270.into_context_iter();
                                                                                                                                                                                while let Some(v271) = v270.next(ctx) {
                                                                                                                                                                                    if v271.0 == I64 {
                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                            opcode: ref v377,
                                                                                                                                                                                            args: ref v378,
                                                                                                                                                                                        } = &v271.1 {
                                                                                                                                                                                            if let &Opcode::Ishl = v377 {
                                                                                                                                                                                                let mut v277 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v277);
                                                                                                                                                                                                let mut v277 = v277.into_context_iter();
                                                                                                                                                                                                while let Some(v278) = v277.next(ctx) {
                                                                                                                                                                                                    if v278.0 == I64 {
                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                            opcode: ref v281,
                                                                                                                                                                                                            args: ref v282,
                                                                                                                                                                                                        } = &v278.1 {
                                                                                                                                                                                                            if let &Opcode::Bor = v281 {
                                                                                                                                                                                                                let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                                                                                                let mut v286 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v283.0, &mut v286);
                                                                                                                                                                                                                let mut v286 = v286.into_context_iter();
                                                                                                                                                                                                                while let Some(v287) = v286.next(ctx) {
                                                                                                                                                                                                                    if v287.0 == I64 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v290,
                                                                                                                                                                                                                            args: ref v291,
                                                                                                                                                                                                                        } = &v287.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v290 {
                                                                                                                                                                                                                                let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                                                                                                let mut v295 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v292.1, &mut v295);
                                                                                                                                                                                                                                let mut v295 = v295.into_context_iter();
                                                                                                                                                                                                                                while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                                                                                    if v296.0 == I64 {
                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                            opcode: ref v299,
                                                                                                                                                                                                                                            imm: v300,
                                                                                                                                                                                                                                        } = &v296.1 {
                                                                                                                                                                                                                                            if let &Opcode::Iconst = v299 {
                                                                                                                                                                                                                                                let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                                                                                                if v301 == 0xFF000000 {
                                                                                                                                                                                                                                                    let mut v302 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                                                                                    let mut v302 = v302.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                                                                                        if v303.0 == I64 {
                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                opcode: ref v421,
                                                                                                                                                                                                                                                                args: ref v422,
                                                                                                                                                                                                                                                            } = &v303.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Band = v421 {
                                                                                                                                                                                                                                                                    let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                                                                                                                                                                                    let mut v309 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v115.1, &mut v309);
                                                                                                                                                                                                                                                                    let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                                                                                    while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                                                                                        if v310.0 == I64 {
                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                opcode: ref v481,
                                                                                                                                                                                                                                                                                args: ref v482,
                                                                                                                                                                                                                                                                            } = &v310.1 {
                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v481 {
                                                                                                                                                                                                                                                                                    let mut v317 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v133.0, &mut v317);
                                                                                                                                                                                                                                                                                    let mut v317 = v317.into_context_iter();
                                                                                                                                                                                                                                                                                    while let Some(v318) = v317.next(ctx) {
                                                                                                                                                                                                                                                                                        if v318.0 == I64 {
                                                                                                                                                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                opcode: ref v321,
                                                                                                                                                                                                                                                                                                args: ref v322,
                                                                                                                                                                                                                                                                                            } = &v318.1 {
                                                                                                                                                                                                                                                                                                if let &Opcode::Ishl = v321 {
                                                                                                                                                                                                                                                                                                    let v323 = C::unpack_value_array_2(ctx, v322);
                                                                                                                                                                                                                                                                                                    let v483 = C::unpack_value_array_2(ctx, v482);
                                                                                                                                                                                                                                                                                                    if v323.0 == v483.0 {
                                                                                                                                                                                                                                                                                                        let mut v326 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v323.1, &mut v326);
                                                                                                                                                                                                                                                                                                        let mut v326 = v326.into_context_iter();
                                                                                                                                                                                                                                                                                                        while let Some(v327) = v326.next(ctx) {
                                                                                                                                                                                                                                                                                                            if v327.0 == I64 {
                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                    opcode: ref v330,
                                                                                                                                                                                                                                                                                                                    imm: v331,
                                                                                                                                                                                                                                                                                                                } = &v327.1 {
                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v330 {
                                                                                                                                                                                                                                                                                                                        let v332 = C::u64_from_imm64(ctx, v331);
                                                                                                                                                                                                                                                                                                                        if v332 == 0x38 {
                                                                                                                                                                                                                                                                                                                            let v335 = C::unpack_value_array_2(ctx, v334);
                                                                                                                                                                                                                                                                                                                            let mut v338 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v335.0, &mut v338);
                                                                                                                                                                                                                                                                                                                            let mut v338 = v338.into_context_iter();
                                                                                                                                                                                                                                                                                                                            while let Some(v339) = v338.next(ctx) {
                                                                                                                                                                                                                                                                                                                                if v339.0 == I64 {
                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                        opcode: ref v342,
                                                                                                                                                                                                                                                                                                                                        args: ref v343,
                                                                                                                                                                                                                                                                                                                                    } = &v339.1 {
                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Band = v342 {
                                                                                                                                                                                                                                                                                                                                            let v344 = C::unpack_value_array_2(ctx, v343);
                                                                                                                                                                                                                                                                                                                                            if v323.0 == v344.0 {
                                                                                                                                                                                                                                                                                                                                                let mut v347 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v344.1, &mut v347);
                                                                                                                                                                                                                                                                                                                                                let mut v347 = v347.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                while let Some(v348) = v347.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                    if v348.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                            opcode: ref v351,
                                                                                                                                                                                                                                                                                                                                                            imm: v352,
                                                                                                                                                                                                                                                                                                                                                        } = &v348.1 {
                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Iconst = v351 {
                                                                                                                                                                                                                                                                                                                                                                let v353 = C::u64_from_imm64(ctx, v352);
                                                                                                                                                                                                                                                                                                                                                                if v353 == 0xFF00 {
                                                                                                                                                                                                                                                                                                                                                                    let mut v354 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v335.1, &mut v354);
                                                                                                                                                                                                                                                                                                                                                                    let mut v354 = v354.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                    while let Some(v355) = v354.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                        if v355.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v358,
                                                                                                                                                                                                                                                                                                                                                                                imm: v359,
                                                                                                                                                                                                                                                                                                                                                                            } = &v355.1 {
                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v358 {
                                                                                                                                                                                                                                                                                                                                                                                    let v360 = C::u64_from_imm64(ctx, v359);
                                                                                                                                                                                                                                                                                                                                                                                    if v360 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                        let mut v361 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v260.0, &mut v361);
                                                                                                                                                                                                                                                                                                                                                                                        let mut v361 = v361.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v362) = v361.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                            if v362.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v365,
                                                                                                                                                                                                                                                                                                                                                                                                    args: ref v366,
                                                                                                                                                                                                                                                                                                                                                                                                } = &v362.1 {
                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Band = v365 {
                                                                                                                                                                                                                                                                                                                                                                                                        let v367 = C::unpack_value_array_2(ctx, v366);
                                                                                                                                                                                                                                                                                                                                                                                                        if v323.0 == v367.0 {
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v370 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v367.1, &mut v370);
                                                                                                                                                                                                                                                                                                                                                                                                            let mut v370 = v370.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v371) = v370.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                if v371.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v374,
                                                                                                                                                                                                                                                                                                                                                                                                                        imm: v375,
                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v371.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v374 {
                                                                                                                                                                                                                                                                                                                                                                                                                            let v376 = C::u64_from_imm64(ctx, v375);
                                                                                                                                                                                                                                                                                                                                                                                                                            if v376 == 0xFF0000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                let v379 = C::unpack_value_array_2(ctx, v378);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v382 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v379.0, &mut v382);
                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v382 = v382.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v383) = v382.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                    if v383.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                            opcode: ref v386,
                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v387,
                                                                                                                                                                                                                                                                                                                                                                                                                                        } = &v383.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &Opcode::Band = v386 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                let v388 = C::unpack_value_array_2(ctx, v387);
                                                                                                                                                                                                                                                                                                                                                                                                                                                if v323.0 == v388.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v391 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v388.1, &mut v391);
                                                                                                                                                                                                                                                                                                                                                                                                                                                    let mut v391 = v391.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                    while let Some(v392) = v391.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v392.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v395,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                imm: v396,
                                                                                                                                                                                                                                                                                                                                                                                                                                                            } = &v392.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v395 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    let v397 = C::u64_from_imm64(ctx, v396);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v397 == 0xFF000000 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v398 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v379.1, &mut v398);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v398 = v398.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        while let Some(v399) = v398.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v399.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    opcode: ref v402,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    imm: v403,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                } = &v399.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v402 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let v404 = C::u64_from_imm64(ctx, v403);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if v404 == 0x8 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v405 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v292.0, &mut v405);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let mut v405 = v405.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            while let Some(v406) = v405.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if v406.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        opcode: ref v409,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        args: ref v410,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    } = &v406.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        if let &Opcode::Ushr = v409 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            let v411 = C::unpack_value_array_2(ctx, v410);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v323.0 == v411.0 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                C::inst_data_etor(ctx, v411.1, &mut v414);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let mut v414 = v414.into_context_iter();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                while let Some(v415) = v414.next(ctx) {
if v415.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v418,
imm: v419,
} = &v415.1 {
if let &Opcode::Iconst = v418 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                let v420 = C::u64_from_imm64(ctx, v419);
if v420 == 0x8 {
let v423 = C::unpack_value_array_2(ctx, v422);
let mut v426 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v423.0, &mut v426);
let mut v426 = v426.into_context_iter();
while let Some(v427) = v426.next(ctx) {
if v427.0 == I64 {
if let &InstructionData::Binary {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                opcode: ref v430,
args: ref v431,
} = &v427.1 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &Opcode::Ushr = v430 {
let v432 = C::unpack_value_array_2(ctx, v431);
if v323.0 == v432.0 {
let mut v435 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v432.1, &mut v435);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v435 = v435.into_context_iter();
while let Some(v436) = v435.next(ctx) {
if v436.0 == I64 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
opcode: ref v439,
imm: v440,
} = &v436.1 {
if let &Opcode::Iconst = v439 {
let v441 = C::u64_from_imm64(ctx, v440);
if v441 == 0x18 {
let mut v442 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v423.1, &mut v442);
let mut v442 = v442.into_context_iter();
while let Some(v443) = v442.next(ctx) {
if v443.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v446,
imm: v447,
} = &v443.1 {
if let &Opcode::Iconst = v446 {
let v448 = C::u64_from_imm64(ctx, v447);
if v448 == 0xFF0000 {
let mut v449 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v115.0, &mut v449);
let mut v449 = v449.into_context_iter();
while let Some(v450) = v449.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    if v450.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v453,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            args: ref v454,
} = &v450.1 {
if let &Opcode::Band = v453 {
let v455 = C::unpack_value_array_2(ctx, v454);
let mut v458 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v455.0, &mut v458);
let mut v458 = v458.into_context_iter();
while let Some(v459) = v458.next(ctx) {
if v459.0 == I64 {
if let &InstructionData::Binary {
opcode: ref v462,
args: ref v463,
} = &v459.1 {
if let &Opcode::Ushr = v462 {
let v464 = C::unpack_value_array_2(ctx, v463);
if v323.0 == v464.0 {
let mut v467 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v464.1, &mut v467);
let mut v467 = v467.into_context_iter();
while let Some(v468) = v467.next(ctx) {
if v468.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v471,
imm: v472,
} = &v468.1 {
if let &Opcode::Iconst = v471 {
let v473 = C::u64_from_imm64(ctx, v472);
if v473 == 0x28 {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        let mut v474 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v455.1, &mut v474);
let mut v474 = v474.into_context_iter();
while let Some(v475) = v474.next(ctx) {
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            if v475.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v478,
imm: v479,
} = &v475.1 {
if let &Opcode::Iconst = v478 {
let v480 = C::u64_from_imm64(ctx, v479);
if v480 == 0xFF00 {
let mut v486 = C::inst_data_etor_returns::default();
inst_data_etor(ctx, v483.1, &mut v486);
let mut v486 = v486.into_context_iter();
while let Some(v487) = v486.next(ctx) {
if v487.0 == I64 {
if let &InstructionData::UnaryImm {
opcode: ref v490,
imm: v491,
} = &v487.1 {
if let &Opcode::Iconst = v490 {
let v492 = C::u64_from_imm64(ctx, v491);
if v492 == 0x38 {
let v493 = constructor_bswap(ctx, v2.0, v323.0);
ule at src/opts/bitops.isle line 161.
returns.extend(Some(v493));
if returns.len() >= MAX_ISLE_RETURNS { return; }
}
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
}
}
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
}
}
}
}
}
}
}
}
}
}
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        &Opcode::Ushr => {
                                                                            if v2.0 == I32 {
                                                                                if v11.0 == I32 {
                                                                                    if v19.0 == I32
                                                                                    {
                                                                                        if v110.0
                                                                                            == I32
                                                                                        {
                                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                            let mut v127 = C::inst_data_etor_returns::default();
                                                                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                            let mut v127 = v127.into_context_iter();
                                                                                            while let Some(v128) = v127.next(ctx) {
                                                                                                if v128.0 == I32 {
                                                                                                    if let &InstructionData::Binary {
                                                                                                        opcode: ref v131,
                                                                                                        args: ref v132,
                                                                                                    } = &v128.1 {
                                                                                                        if let &Opcode::Ishl = v131 {
                                                                                                            let v115 = C::unpack_value_array_2(ctx, v114);
                                                                                                            let v133 = C::unpack_value_array_2(ctx, v132);
                                                                                                            if v115.0 == v133.0 {
                                                                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                                                let mut v167 = v167.into_context_iter();
                                                                                                                while let Some(v168) = v167.next(ctx) {
                                                                                                                    if v168.0 == I32 {
                                                                                                                        if let &InstructionData::Binary {
                                                                                                                            opcode: ref v249,
                                                                                                                            args: ref v250,
                                                                                                                        } = &v168.1 {
                                                                                                                            if let &Opcode::Ishl = v249 {
                                                                                                                                let mut v242 = C::inst_data_etor_returns::default();
                                                                                                                                C::inst_data_etor(ctx, v133.1, &mut v242);
                                                                                                                                let mut v242 = v242.into_context_iter();
                                                                                                                                while let Some(v243) = v242.next(ctx) {
                                                                                                                                    if v243.0 == I32 {
                                                                                                                                        if let &InstructionData::UnaryImm {
                                                                                                                                            opcode: ref v246,
                                                                                                                                            imm: v247,
                                                                                                                                        } = &v243.1 {
                                                                                                                                            if let &Opcode::Iconst = v246 {
                                                                                                                                                let v248 = C::u64_from_imm64(ctx, v247);
                                                                                                                                                if v248 == 0x18 {
                                                                                                                                                    let v251 = C::unpack_value_array_2(ctx, v250);
                                                                                                                                                    let mut v254 = C::inst_data_etor_returns::default();
                                                                                                                                                    C::inst_data_etor(ctx, v251.0, &mut v254);
                                                                                                                                                    let mut v254 = v254.into_context_iter();
                                                                                                                                                    while let Some(v255) = v254.next(ctx) {
                                                                                                                                                        if v255.0 == I32 {
                                                                                                                                                            if let &InstructionData::Binary {
                                                                                                                                                                opcode: ref v258,
                                                                                                                                                                args: ref v259,
                                                                                                                                                            } = &v255.1 {
                                                                                                                                                                if let &Opcode::Band = v258 {
                                                                                                                                                                    let v260 = C::unpack_value_array_2(ctx, v259);
                                                                                                                                                                    if v115.0 == v260.0 {
                                                                                                                                                                        let mut v263 = C::inst_data_etor_returns::default();
                                                                                                                                                                        C::inst_data_etor(ctx, v260.1, &mut v263);
                                                                                                                                                                        let mut v263 = v263.into_context_iter();
                                                                                                                                                                        while let Some(v264) = v263.next(ctx) {
                                                                                                                                                                            if v264.0 == I32 {
                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                    opcode: ref v267,
                                                                                                                                                                                    imm: v268,
                                                                                                                                                                                } = &v264.1 {
                                                                                                                                                                                    if let &Opcode::Iconst = v267 {
                                                                                                                                                                                        let v269 = C::u64_from_imm64(ctx, v268);
                                                                                                                                                                                        if v269 == 0xFF00 {
                                                                                                                                                                                            let mut v270 = C::inst_data_etor_returns::default();
                                                                                                                                                                                            C::inst_data_etor(ctx, v251.1, &mut v270);
                                                                                                                                                                                            let mut v270 = v270.into_context_iter();
                                                                                                                                                                                            while let Some(v271) = v270.next(ctx) {
                                                                                                                                                                                                if v271.0 == I32 {
                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                        opcode: ref v274,
                                                                                                                                                                                                        imm: v275,
                                                                                                                                                                                                    } = &v271.1 {
                                                                                                                                                                                                        if let &Opcode::Iconst = v274 {
                                                                                                                                                                                                            let v276 = C::u64_from_imm64(ctx, v275);
                                                                                                                                                                                                            if v276 == 0x8 {
                                                                                                                                                                                                                let mut v277 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                C::inst_data_etor(ctx, v106.0, &mut v277);
                                                                                                                                                                                                                let mut v277 = v277.into_context_iter();
                                                                                                                                                                                                                while let Some(v278) = v277.next(ctx) {
                                                                                                                                                                                                                    if v278.0 == I32 {
                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                            opcode: ref v281,
                                                                                                                                                                                                                            args: ref v282,
                                                                                                                                                                                                                        } = &v278.1 {
                                                                                                                                                                                                                            if let &Opcode::Band = v281 {
                                                                                                                                                                                                                                let v283 = C::unpack_value_array_2(ctx, v282);
                                                                                                                                                                                                                                let mut v286 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                C::inst_data_etor(ctx, v283.0, &mut v286);
                                                                                                                                                                                                                                let mut v286 = v286.into_context_iter();
                                                                                                                                                                                                                                while let Some(v287) = v286.next(ctx) {
                                                                                                                                                                                                                                    if v287.0 == I32 {
                                                                                                                                                                                                                                        if let &InstructionData::Binary {
                                                                                                                                                                                                                                            opcode: ref v290,
                                                                                                                                                                                                                                            args: ref v291,
                                                                                                                                                                                                                                        } = &v287.1 {
                                                                                                                                                                                                                                            if let &Opcode::Ushr = v290 {
                                                                                                                                                                                                                                                let v292 = C::unpack_value_array_2(ctx, v291);
                                                                                                                                                                                                                                                if v115.0 == v292.0 {
                                                                                                                                                                                                                                                    let mut v295 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                    C::inst_data_etor(ctx, v292.1, &mut v295);
                                                                                                                                                                                                                                                    let mut v295 = v295.into_context_iter();
                                                                                                                                                                                                                                                    while let Some(v296) = v295.next(ctx) {
                                                                                                                                                                                                                                                        if v296.0 == I32 {
                                                                                                                                                                                                                                                            if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                opcode: ref v299,
                                                                                                                                                                                                                                                                imm: v300,
                                                                                                                                                                                                                                                            } = &v296.1 {
                                                                                                                                                                                                                                                                if let &Opcode::Iconst = v299 {
                                                                                                                                                                                                                                                                    let v301 = C::u64_from_imm64(ctx, v300);
                                                                                                                                                                                                                                                                    if v301 == 0x8 {
                                                                                                                                                                                                                                                                        let mut v302 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                        C::inst_data_etor(ctx, v283.1, &mut v302);
                                                                                                                                                                                                                                                                        let mut v302 = v302.into_context_iter();
                                                                                                                                                                                                                                                                        while let Some(v303) = v302.next(ctx) {
                                                                                                                                                                                                                                                                            if v303.0 == I32 {
                                                                                                                                                                                                                                                                                if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                    opcode: ref v306,
                                                                                                                                                                                                                                                                                    imm: v307,
                                                                                                                                                                                                                                                                                } = &v303.1 {
                                                                                                                                                                                                                                                                                    if let &Opcode::Iconst = v306 {
                                                                                                                                                                                                                                                                                        let v308 = C::u64_from_imm64(ctx, v307);
                                                                                                                                                                                                                                                                                        if v308 == 0xFF00 {
                                                                                                                                                                                                                                                                                            let mut v309 = C::inst_data_etor_returns::default();
                                                                                                                                                                                                                                                                                            C::inst_data_etor(ctx, v115.1, &mut v309);
                                                                                                                                                                                                                                                                                            let mut v309 = v309.into_context_iter();
                                                                                                                                                                                                                                                                                            while let Some(v310) = v309.next(ctx) {
                                                                                                                                                                                                                                                                                                if v310.0 == I32 {
                                                                                                                                                                                                                                                                                                    if let &InstructionData::UnaryImm {
                                                                                                                                                                                                                                                                                                        opcode: ref v313,
                                                                                                                                                                                                                                                                                                        imm: v314,
                                                                                                                                                                                                                                                                                                    } = &v310.1 {
                                                                                                                                                                                                                                                                                                        if let &Opcode::Iconst = v313 {
                                                                                                                                                                                                                                                                                                            let v315 = C::u64_from_imm64(ctx, v314);
                                                                                                                                                                                                                                                                                                            if v315 == 0x18 {
                                                                                                                                                                                                                                                                                                                let v316 = constructor_bswap(ctx, v2.0, v133.0);
                                                                                                                                                                                                                                                                                                                // Rule at src/opts/bitops.isle line 148.
                                                                                                                                                                                                                                                                                                                returns.extend(Some(v316));
                                                                                                                                                                                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                                }
                                                                                                                                                                                                                                            }
                                                                                                                                                                                                                                        }
                                                                                                                                                                                                                                    }
                                                                                                                                                                                                                                }
                                                                                                                                                                                                                            }
                                                                                                                                                                                                                        }
                                                                                                                                                                                                                    }
                                                                                                                                                                                                                }
                                                                                                                                                                                                            }
                                                                                                                                                                                                        }
                                                                                                                                                                                                    }
                                                                                                                                                                                                }
                                                                                                                                                                                            }
                                                                                                                                                                                        }
                                                                                                                                                                                    }
                                                                                                                                                                                }
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        _ => {}
                                                                    }
                                                                }
                                                                &InstructionData::UnaryImm {
                                                                    opcode: ref v654,
                                                                    imm: v655,
                                                                } => {
                                                                    if let &Opcode::Iconst = v654 {
                                                                        if v2.0 == v11.0 {
                                                                            if v2.0 == v19.0 {
                                                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(
                                                                                    ctx, v124.1,
                                                                                    &mut v167,
                                                                                );
                                                                                let mut v167 = v167.into_context_iter();
                                                                                while let Some(
                                                                                    v168,
                                                                                ) =
                                                                                    v167.next(ctx)
                                                                                {
                                                                                    if let &InstructionData::UnaryImm {
                                                                                        opcode: ref v194,
                                                                                        imm: v195,
                                                                                    } = &v168.1 {
                                                                                        if let &Opcode::Iconst = v194 {
                                                                                            let v665 = constructor_bor(ctx, v2.0, v124.0, v106.0);
                                                                                            let v666 = constructor_bor(ctx, v2.0, v124.1, v106.1);
                                                                                            let v667 = constructor_bor(ctx, v2.0, v665, v666);
                                                                                            // Rule at src/opts/cprop.isle line 239.
                                                                                            returns.extend(Some(v667));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                _ => {}
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ishl => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Ushr = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v654,
                                                                                imm: v655,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v654 {
                                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                    let mut v167 = v167.into_context_iter();
                                                                                    while let Some(v168) = v167.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v194,
                                                                                            imm: v195,
                                                                                        } = &v168.1 {
                                                                                            if let &Opcode::Iconst = v194 {
                                                                                                let v196 = C::u64_from_imm64(ctx, v195);
                                                                                                let v1043 = C::lane_type(ctx, v53);
                                                                                                let v1044 = C::ty_bits_u64(ctx, v1043);
                                                                                                let v1042 = C::u64_from_imm64(ctx, v655);
                                                                                                let v1048 = C::u64_sub(ctx, v1044, v1042);
                                                                                                let v1049 = C::u64_eq(ctx, v196, v1048);
                                                                                                if v1049 == true {
                                                                                                    let v1050 = constructor_rotl(ctx, v53, v124.0, v106.1);
                                                                                                    // Rule at src/opts/shifts.isle line 281.
                                                                                                    returns.extend(Some(v1050));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v11.0 == v53 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Binary {
                                                            opcode: ref v122,
                                                            args: ref v123,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Ishl = v122 {
                                                                if v11.0 == v19.0 {
                                                                    let v106 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v105,
                                                                        );
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    if v106.0 == v124.0 {
                                                                        let mut v109 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v106.1, &mut v109,
                                                                        );
                                                                        let mut v109 = v109
                                                                            .into_context_iter();
                                                                        while let Some(v110) =
                                                                            v109.next(ctx)
                                                                        {
                                                                            if let &InstructionData::UnaryImm {
                                                                                opcode: ref v654,
                                                                                imm: v655,
                                                                            } = &v110.1 {
                                                                                if let &Opcode::Iconst = v654 {
                                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                    let mut v167 = v167.into_context_iter();
                                                                                    while let Some(v168) = v167.next(ctx) {
                                                                                        if let &InstructionData::UnaryImm {
                                                                                            opcode: ref v194,
                                                                                            imm: v195,
                                                                                        } = &v168.1 {
                                                                                            if let &Opcode::Iconst = v194 {
                                                                                                let v1042 = C::u64_from_imm64(ctx, v655);
                                                                                                let v1043 = C::lane_type(ctx, v53);
                                                                                                let v1044 = C::ty_bits_u64(ctx, v1043);
                                                                                                let v196 = C::u64_from_imm64(ctx, v195);
                                                                                                let v1045 = C::u64_sub(ctx, v1044, v196);
                                                                                                let v1046 = C::u64_eq(ctx, v1042, v1045);
                                                                                                if v1046 == true {
                                                                                                    let v1047 = constructor_rotl(ctx, v53, v124.0, v124.1);
                                                                                                    // Rule at src/opts/shifts.isle line 276.
                                                                                                    returns.extend(Some(v1047));
                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::IntCompare {
                                    opcode: ref v798,
                                    args: ref v799,
                                    cond: ref v800,
                                } => {
                                    if let &Opcode::Icmp = v798 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v768,
                                                        args: ref v769,
                                                        cond: ref v770,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Icmp = v768 {
                                                            let v804 = constructor_intcc_comparable(
                                                                ctx, v770, v800,
                                                            );
                                                            if let Some(v805) = v804 {
                                                                if v11.0 == v19.0 {
                                                                    let v771 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v769,
                                                                        );
                                                                    let v801 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v799,
                                                                        );
                                                                    if v771.0 == v801.0 {
                                                                        if v771.1 == v801.1 {
                                                                            let v806 = constructor_decompose_intcc(ctx, v770);
                                                                            let v807 = constructor_decompose_intcc(ctx, v800);
                                                                            let v810 = C::u64_or(
                                                                                ctx, v806, v807,
                                                                            );
                                                                            let v811 = constructor_compose_icmp(ctx, v495, v810, v805, v771.0, v771.1);
                                                                            // Rule at src/opts/icmp.isle line 132.
                                                                            returns
                                                                                .extend(Some(v811));
                                                                            if returns.len()
                                                                                >= MAX_ISLE_RETURNS
                                                                            {
                                                                                return;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1062 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1063) = v1062 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1025 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1066 = constructor_bor(
                                                                        ctx, v1025, v30, v27,
                                                                    );
                                                                    let v1067 = constructor_splat(
                                                                        ctx, v2.0, v1066,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 19.
                                                                    returns.extend(Some(v1067));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v186 =
                                                            constructor_iconst_s(ctx, v53, -0x1);
                                                        let v187 = C::subsume(ctx, v186);
                                                        // Rule at src/opts/bitops.isle line 25.
                                                        returns.extend(Some(v187));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            if v2.0 == v11.0 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v122,
                                                        args: ref v123,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Band = v122 {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                if v27 == v124.1 {
                                                                    let v192 = constructor_bor(
                                                                        ctx, v2.0, v124.0, v7.1,
                                                                    );
                                                                    // Rule at src/opts/bitops.isle line 50.
                                                                    returns.extend(Some(v192));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v684 = C::value_type(ctx, v30);
                                                        let v719 = C::value_type(ctx, v27);
                                                        if v684 == v719 {
                                                            let v722 = constructor_bor(
                                                                ctx, v684, v30, v27,
                                                            );
                                                            let v723 = constructor_uextend(
                                                                ctx, v2.0, v722,
                                                            );
                                                            // Rule at src/opts/extends.isle line 73.
                                                            returns.extend(Some(v723));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    match v122 {
                                                        &Opcode::Band => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            let v197 = C::ty_mask(ctx, v2.0);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v198 = C::u64_and(ctx, v197, v16);
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            let v199 = C::u64_not(ctx, v196);
                                                                            let v200 = C::u64_and(ctx, v197, v199);
                                                                            let v201 = C::u64_eq(ctx, v198, v200);
                                                                            if v201 == true {
                                                                                if v2.0 == v168.0 {
                                                                                    let v192 = constructor_bor(ctx, v2.0, v124.0, v7.1);
                                                                                    // Rule at src/opts/bitops.isle line 70.
                                                                                    returns.extend(Some(v192));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            if v2.0 == v168.0 {
                                                                                let v603 = constructor_bor(ctx, v2.0, v124.1, v7.1);
                                                                                let v604 = constructor_bor(ctx, v2.0, v124.0, v603);
                                                                                // Rule at src/opts/cprop.isle line 160.
                                                                                returns.extend(Some(v604));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v518 = C::u64_or(ctx, v24, v16);
                                                                let v519 = C::imm64_masked(
                                                                    ctx, v495, v518,
                                                                );
                                                                let v520 = constructor_iconst(
                                                                    ctx, v495, v519,
                                                                );
                                                                let v521 = C::subsume(ctx, v520);
                                                                // Rule at src/opts/cprop.isle line 35.
                                                                returns.extend(Some(v521));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 18.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v186 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v187 = C::subsume(ctx, v186);
                                                    // Rule at src/opts/bitops.isle line 26.
                                                    returns.extend(Some(v187));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v574 = constructor_bor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 107.
                                            returns.extend(Some(v574));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 16.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v17 = C::subsume(ctx, v7.0);
                            // Rule at src/opts/bitops.isle line 8.
                            returns.extend(Some(v17));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bxor => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Bxor = v104 {
                                        if v2.0 == v11.0 {
                                            let v106 = C::unpack_value_array_2(ctx, v105);
                                            let mut v109 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v106.1, &mut v109);
                                            let mut v109 = v109.into_context_iter();
                                            while let Some(v110) = v109.next(ctx) {
                                                match &v110.1 {
                                                    &InstructionData::Binary {
                                                        opcode: ref v113,
                                                        args: ref v114,
                                                    } => {
                                                        if let &Opcode::Bxor = v113 {
                                                            if v2.0 == v110.0 {
                                                                let v156 = constructor_bxor(
                                                                    ctx, v2.0, v7.0, v106.0,
                                                                );
                                                                let v115 = C::unpack_value_array_2(
                                                                    ctx, v114,
                                                                );
                                                                let v157 = constructor_bxor(
                                                                    ctx, v2.0, v115.0, v115.1,
                                                                );
                                                                let v158 = constructor_bxor(
                                                                    ctx, v2.0, v156, v157,
                                                                );
                                                                let v159 = C::subsume(ctx, v158);
                                                                // Rule at src/opts/arithmetic.isle line 150.
                                                                returns.extend(Some(v159));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    &InstructionData::UnaryImm {
                                                        opcode: ref v654,
                                                        imm: v655,
                                                    } => {
                                                        if let &Opcode::Iconst = v654 {
                                                            let mut v18 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                                            let mut v18 = v18.into_context_iter();
                                                            while let Some(v19) = v18.next(ctx) {
                                                                if let &InstructionData::Binary {
                                                                    opcode: ref v122,
                                                                    args: ref v123,
                                                                } = &v19.1
                                                                {
                                                                    if let &Opcode::Bxor = v122 {
                                                                        if v2.0 == v19.0 {
                                                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                                                            let mut v167 = C::inst_data_etor_returns::default();
                                                                            C::inst_data_etor(
                                                                                ctx, v124.1,
                                                                                &mut v167,
                                                                            );
                                                                            let mut v167 = v167
                                                                                .into_context_iter(
                                                                                );
                                                                            while let Some(v168) =
                                                                                v167.next(ctx)
                                                                            {
                                                                                if let &InstructionData::UnaryImm {
                                                                                    opcode: ref v194,
                                                                                    imm: v195,
                                                                                } = &v168.1 {
                                                                                    if let &Opcode::Iconst = v194 {
                                                                                        let v668 = constructor_bxor(ctx, v2.0, v124.0, v106.0);
                                                                                        let v669 = constructor_bxor(ctx, v2.0, v124.1, v106.1);
                                                                                        let v670 = constructor_bxor(ctx, v2.0, v668, v669);
                                                                                        // Rule at src/opts/cprop.isle line 243.
                                                                                        returns.extend(Some(v670));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Splat => {
                                            let v1062 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1063) = v1062 {
                                                if v2.0 == v11.0 {
                                                    let mut v18 =
                                                        C::inst_data_etor_returns::default();
                                                    C::inst_data_etor(ctx, v7.0, &mut v18);
                                                    let mut v18 = v18.into_context_iter();
                                                    while let Some(v19) = v18.next(ctx) {
                                                        if let &InstructionData::Unary {
                                                            opcode: ref v29,
                                                            arg: v30,
                                                        } = &v19.1
                                                        {
                                                            if let &Opcode::Splat = v29 {
                                                                if v2.0 == v19.0 {
                                                                    let v1025 =
                                                                        C::lane_type(ctx, v2.0);
                                                                    let v1068 = constructor_bxor(
                                                                        ctx, v1025, v30, v27,
                                                                    );
                                                                    let v1069 = constructor_splat(
                                                                        ctx, v2.0, v1068,
                                                                    );
                                                                    // Rule at src/opts/vector.isle line 23.
                                                                    returns.extend(Some(v1069));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v7.0 == v27 {
                                                    if v11.0 == v53 {
                                                        let v186 =
                                                            constructor_iconst_s(ctx, v53, -0x1);
                                                        let v187 = C::subsume(ctx, v186);
                                                        // Rule at src/opts/bitops.isle line 23.
                                                        returns.extend(Some(v187));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Unary {
                                                    opcode: ref v29,
                                                    arg: v30,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Uextend = v29 {
                                                        let v684 = C::value_type(ctx, v30);
                                                        let v719 = C::value_type(ctx, v27);
                                                        if v684 == v719 {
                                                            let v724 = constructor_bxor(
                                                                ctx, v684, v30, v27,
                                                            );
                                                            let v725 = constructor_uextend(
                                                                ctx, v2.0, v724,
                                                            );
                                                            // Rule at src/opts/extends.isle line 75.
                                                            returns.extend(Some(v725));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        if v2.0 == v11.0 {
                                            let v16 = C::u64_from_imm64(ctx, v15);
                                            if v16 == 0x0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/bitops.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            let mut v18 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v7.0, &mut v18);
                                            let mut v18 = v18.into_context_iter();
                                            while let Some(v19) = v18.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } = &v19.1
                                                {
                                                    if let &Opcode::Bxor = v122 {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let mut v167 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v124.1, &mut v167,
                                                            );
                                                            let mut v167 = v167.into_context_iter();
                                                            while let Some(v168) = v167.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v194,
                                                                    imm: v195,
                                                                } = &v168.1 {
                                                                    if let &Opcode::Iconst = v194 {
                                                                        if v2.0 == v168.0 {
                                                                            let v607 = constructor_bxor(ctx, v2.0, v124.1, v7.1);
                                                                            let v608 = constructor_bxor(ctx, v2.0, v124.0, v607);
                                                                            // Rule at src/opts/cprop.isle line 166.
                                                                            returns.extend(Some(v608));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v11.0 == v495 {
                                                let mut v18 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v7.0, &mut v18);
                                                let mut v18 = v18.into_context_iter();
                                                while let Some(v19) = v18.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v22,
                                                        imm: v23,
                                                    } = &v19.1
                                                    {
                                                        if let &Opcode::Iconst = v22 {
                                                            if v11.0 == v19.0 {
                                                                let v24 =
                                                                    C::u64_from_imm64(ctx, v23);
                                                                let v16 =
                                                                    C::u64_from_imm64(ctx, v15);
                                                                let v526 =
                                                                    C::u64_xor(ctx, v24, v16);
                                                                let v527 = C::imm64_masked(
                                                                    ctx, v495, v526,
                                                                );
                                                                let v528 = constructor_iconst(
                                                                    ctx, v495, v527,
                                                                );
                                                                let v529 = C::subsume(ctx, v528);
                                                                // Rule at src/opts/cprop.isle line 47.
                                                                returns.extend(Some(v529));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 22.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    if let &Opcode::Bxor = v122 {
                                        if v2.0 == v19.0 {
                                            let v124 = C::unpack_value_array_2(ctx, v123);
                                            let mut v127 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v124.0, &mut v127);
                                            let mut v127 = v127.into_context_iter();
                                            while let Some(v128) = v127.next(ctx) {
                                                if let &InstructionData::Binary {
                                                    opcode: ref v131,
                                                    args: ref v132,
                                                } = &v128.1
                                                {
                                                    if let &Opcode::Bxor = v131 {
                                                        if v2.0 == v128.0 {
                                                            let v133 =
                                                                C::unpack_value_array_2(ctx, v132);
                                                            let v160 = constructor_bxor(
                                                                ctx, v2.0, v133.0, v133.1,
                                                            );
                                                            let v161 = constructor_bxor(
                                                                ctx, v2.0, v124.1, v7.1,
                                                            );
                                                            let v162 = constructor_bxor(
                                                                ctx, v2.0, v160, v161,
                                                            );
                                                            let v163 = C::subsume(ctx, v162);
                                                            // Rule at src/opts/arithmetic.isle line 152.
                                                            returns.extend(Some(v163));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Bnot = v29 {
                                        if v7.1 == v30 {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                if v19.0 == v53 {
                                                    let v186 = constructor_iconst_s(ctx, v53, -0x1);
                                                    let v187 = C::subsume(ctx, v186);
                                                    // Rule at src/opts/bitops.isle line 24.
                                                    returns.extend(Some(v187));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v22,
                                    imm: v23,
                                } => {
                                    if let &Opcode::Iconst = v22 {
                                        if v2.0 == v19.0 {
                                            let v576 = constructor_bxor(ctx, v2.0, v7.1, v7.0);
                                            // Rule at src/opts/cprop.isle line 113.
                                            returns.extend(Some(v576));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v820 = C::remat(ctx, arg0);
                                        // Rule at src/opts/remat.isle line 20.
                                        returns.extend(Some(v820));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v7.0 == v7.1 {
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                let v56 = C::subsume(ctx, v55);
                                // Rule at src/opts/bitops.isle line 18.
                                returns.extend(Some(v56));
                                if returns.len() >= MAX_ISLE_RETURNS {
                                    return;
                                }
                            }
                        }
                        let mut v58 = C::inst_data_tupled_etor_returns::default();
                        C::inst_data_tupled_etor(ctx, v7.1, &mut v58);
                        let mut v58 = v58.into_context_iter();
                        while let Some(v59) = v58.next(ctx) {
                            let v60 = C::iconst_sextend_etor(ctx, v59);
                            if let Some(v61) = v60 {
                                if v61.1 == -0x1 {
                                    if v2.0 == v61.0 {
                                        let v202 = constructor_bnot(ctx, v2.0, v7.0);
                                        // Rule at src/opts/bitops.isle line 78.
                                        returns.extend(Some(v202));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Rotl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1021 = constructor_rotl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 143.
                                        returns.extend(Some(v1021));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v719 = C::value_type(ctx, v27);
                                            let v1010 = C::fits_in_64(ctx, v719);
                                            if let Some(v1011) = v1010 {
                                                let v1016 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 127.
                                                returns.extend(Some(v1016));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1016 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 128.
                                            returns.extend(Some(v1016));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1016 = constructor_rotl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 129.
                                            returns.extend(Some(v1016));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1
                                            {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1034 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1035 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1034,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 240.
                                                            returns.extend(Some(v1035));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1037 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1039 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1037,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 247.
                                                            returns.extend(Some(v1039));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 20.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1023 = C::u64_and(ctx, v16, v203);
                                        let v1051 = C::u64_eq(ctx, v16, v1023);
                                        if v1051 == false {
                                            let v1052 = constructor_iconst_u(ctx, v11.0, v1023);
                                            let v1057 = constructor_rotl(ctx, v2.0, v7.0, v1052);
                                            // Rule at src/opts/shifts.isle line 305.
                                            returns.extend(Some(v1057));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1040 = C::value_type(ctx, v124.1);
                                                let v1041 = C::value_type(ctx, v7.1);
                                                if v1040 == v1041 {
                                                    let v1034 =
                                                        constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1035 =
                                                        constructor_rotl(ctx, v2.0, v124.0, v1034);
                                                    // Rule at src/opts/shifts.isle line 261.
                                                    returns.extend(Some(v1035));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v194,
                                                        imm: v195,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v194 {
                                                            let v1034 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1035 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1034,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 239.
                                                            returns.extend(Some(v1035));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1033 = C::subsume(ctx, v124.0);
                                                    // Rule at src/opts/shifts.isle line 204.
                                                    returns.extend(Some(v1033));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v1040 = C::value_type(ctx, v124.1);
                                                let v1041 = C::value_type(ctx, v7.1);
                                                if v1040 == v1041 {
                                                    let v1037 =
                                                        constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1039 =
                                                        constructor_rotr(ctx, v2.0, v124.0, v1037);
                                                    // Rule at src/opts/shifts.isle line 266.
                                                    returns.extend(Some(v1039));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v194,
                                                        imm: v195,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v194 {
                                                            let v1037 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1039 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1037,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 246.
                                                            returns.extend(Some(v1039));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1025 = C::lane_type(ctx, v2.0);
                                            let v1096 = constructor_rotl(ctx, v1025, v30, v7.1);
                                            let v1097 = constructor_splat(ctx, v2.0, v1096);
                                            // Rule at src/opts/vector.isle line 69.
                                            returns.extend(Some(v1097));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Rotr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1020 = constructor_rotr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 142.
                                        returns.extend(Some(v1020));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v719 = C::value_type(ctx, v27);
                                            let v1010 = C::fits_in_64(ctx, v719);
                                            if let Some(v1011) = v1010 {
                                                let v1015 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 124.
                                                returns.extend(Some(v1015));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1015 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 125.
                                            returns.extend(Some(v1015));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1015 = constructor_rotr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 126.
                                            returns.extend(Some(v1015));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Binary {
                                                opcode: ref v122,
                                                args: ref v123,
                                            } = &v19.1
                                            {
                                                match v122 {
                                                    &Opcode::Rotl => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1037 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1038 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1037,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 245.
                                                            returns.extend(Some(v1038));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    &Opcode::Rotr => {
                                                        if v2.0 == v19.0 {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let v1034 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1036 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1034,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 242.
                                                            returns.extend(Some(v1036));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                    _ => {}
                                                }
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 16.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1023 = C::u64_and(ctx, v16, v203);
                                        let v1051 = C::u64_eq(ctx, v16, v1023);
                                        if v1051 == false {
                                            let v1052 = constructor_iconst_u(ctx, v11.0, v1023);
                                            let v1056 = constructor_rotr(ctx, v2.0, v7.0, v1052);
                                            // Rule at src/opts/shifts.isle line 302.
                                            returns.extend(Some(v1056));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            match &v19.1 {
                                &InstructionData::Binary {
                                    opcode: ref v122,
                                    args: ref v123,
                                } => {
                                    match v122 {
                                        &Opcode::Rotl => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                if v7.1 == v124.1 {
                                                    let v1033 = C::subsume(ctx, v124.0);
                                                    // Rule at src/opts/shifts.isle line 205.
                                                    returns.extend(Some(v1033));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v1040 = C::value_type(ctx, v124.1);
                                                let v1041 = C::value_type(ctx, v7.1);
                                                if v1040 == v1041 {
                                                    let v1037 =
                                                        constructor_isub_uextend(ctx, v124.1, v7.1);
                                                    let v1038 =
                                                        constructor_rotl(ctx, v2.0, v124.0, v1037);
                                                    // Rule at src/opts/shifts.isle line 264.
                                                    returns.extend(Some(v1038));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v194,
                                                        imm: v195,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v194 {
                                                            let v1037 = constructor_isub_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1038 = constructor_rotl(
                                                                ctx, v2.0, v124.0, v1037,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 244.
                                                            returns.extend(Some(v1038));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Rotr => {
                                            if v2.0 == v19.0 {
                                                let v124 = C::unpack_value_array_2(ctx, v123);
                                                let v1040 = C::value_type(ctx, v124.1);
                                                let v1041 = C::value_type(ctx, v7.1);
                                                if v1040 == v1041 {
                                                    let v1034 =
                                                        constructor_iadd_uextend(ctx, v124.1, v7.1);
                                                    let v1036 =
                                                        constructor_rotr(ctx, v2.0, v124.0, v1034);
                                                    // Rule at src/opts/shifts.isle line 259.
                                                    returns.extend(Some(v1036));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let mut v167 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v124.1, &mut v167);
                                                let mut v167 = v167.into_context_iter();
                                                while let Some(v168) = v167.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v194,
                                                        imm: v195,
                                                    } = &v168.1
                                                    {
                                                        if let &Opcode::Iconst = v194 {
                                                            let v1034 = constructor_iadd_uextend(
                                                                ctx, v124.1, v7.1,
                                                            );
                                                            let v1036 = constructor_rotr(
                                                                ctx, v2.0, v124.0, v1034,
                                                            );
                                                            // Rule at src/opts/shifts.isle line 241.
                                                            returns.extend(Some(v1036));
                                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                                return;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v29,
                                    arg: v30,
                                } => {
                                    if let &Opcode::Splat = v29 {
                                        if v2.0 == v19.0 {
                                            let v1025 = C::lane_type(ctx, v2.0);
                                            let v1098 = constructor_rotr(ctx, v1025, v30, v7.1);
                                            let v1099 = constructor_splat(ctx, v2.0, v1098);
                                            // Rule at src/opts/vector.isle line 72.
                                            returns.extend(Some(v1099));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ishl => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1017 = constructor_ishl(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 139.
                                        returns.extend(Some(v1017));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v719 = C::value_type(ctx, v27);
                                            let v1010 = C::fits_in_64(ctx, v719);
                                            if let Some(v1011) = v1010 {
                                                let v1012 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 115.
                                                returns.extend(Some(v1012));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1012 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 116.
                                            returns.extend(Some(v1012));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1012 = constructor_ishl(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 117.
                                            returns.extend(Some(v1012));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1022 = C::u64_and(ctx, v196, v203);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1023 = C::u64_and(ctx, v16, v203);
                                                                            let v1024 = C::u64_add(ctx, v1022, v1023);
                                                                            let v1025 = C::lane_type(ctx, v2.0);
                                                                            let v1026 = C::ty_bits_u64(ctx, v1025);
                                                                            let v1027 = C::u64_lt(ctx, v1024, v1026);
                                                                            if v1027 == true {
                                                                                let v1028 = constructor_iconst_u(ctx, v168.0, v1024);
                                                                                let v1029 = constructor_ishl(ctx, v2.0, v124.0, v1028);
                                                                                // Rule at src/opts/shifts.isle line 152.
                                                                                returns.extend(Some(v1029));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v986 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1032 = C::u64_le(ctx, v986, v1024);
                                                                            if v1032 == true {
                                                                                let v693 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v694 = C::subsume(ctx, v693);
                                                                                // Rule at src/opts/shifts.isle line 184.
                                                                                returns.extend(Some(v694));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v585,
                                                                        imm: v586,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v585 {
                                                                            let v648 = constructor_ishl(ctx, v2.0, v124.0, v7.1);
                                                                            let v649 = constructor_ishl(ctx, v2.0, v648, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 214.
                                                                            returns.extend(Some(v649));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            let v494 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v495) = v494 {
                                                                if v19.0 == v495 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v194,
                                                                            imm: v195,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v194 {
                                                                                if v15 == v195 {
                                                                                    let v977 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v978 = C::imm64_shl(ctx, v495, v977, v195);
                                                                                    let v979 = constructor_iconst(ctx, v495, v978);
                                                                                    let v980 = constructor_band(ctx, v495, v124.0, v979);
                                                                                    // Rule at src/opts/shifts.isle line 27.
                                                                                    returns.extend(Some(v980));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            let v494 = C::fits_in_64(ctx, v2.0);
                                                            if let Some(v495) = v494 {
                                                                if v19.0 == v495 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v167 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.1, &mut v167,
                                                                    );
                                                                    let mut v167 =
                                                                        v167.into_context_iter();
                                                                    while let Some(v168) =
                                                                        v167.next(ctx)
                                                                    {
                                                                        if let &InstructionData::UnaryImm {
                                                                            opcode: ref v194,
                                                                            imm: v195,
                                                                        } = &v168.1 {
                                                                            if let &Opcode::Iconst = v194 {
                                                                                if v15 == v195 {
                                                                                    let v977 = C::imm64(ctx, 0xFFFFFFFFFFFFFFFF);
                                                                                    let v978 = C::imm64_shl(ctx, v495, v977, v195);
                                                                                    let v979 = constructor_iconst(ctx, v495, v978);
                                                                                    let v980 = constructor_band(ctx, v495, v124.0, v979);
                                                                                    // Rule at src/opts/shifts.isle line 32.
                                                                                    returns.extend(Some(v980));
                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v494 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v495) = v494 {
                                                            if v19.0 == v495 {
                                                                let v537 = C::imm64_shl(
                                                                    ctx, v495, v23, v15,
                                                                );
                                                                let v538 = constructor_iconst(
                                                                    ctx, v495, v537,
                                                                );
                                                                let v539 = C::subsume(ctx, v538);
                                                                // Rule at src/opts/cprop.isle line 58.
                                                                returns.extend(Some(v539));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 4.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1023 = C::u64_and(ctx, v16, v203);
                                        let v1051 = C::u64_eq(ctx, v16, v1023);
                                        if v1051 == false {
                                            let v1052 = constructor_iconst_u(ctx, v11.0, v1023);
                                            let v1053 = constructor_ishl(ctx, v2.0, v7.0, v1052);
                                            // Rule at src/opts/shifts.isle line 293.
                                            returns.extend(Some(v1053));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1025 = C::lane_type(ctx, v2.0);
                                        let v1100 = constructor_ishl(ctx, v1025, v30, v7.1);
                                        let v1101 = constructor_splat(ctx, v2.0, v1100);
                                        // Rule at src/opts/vector.isle line 75.
                                        returns.extend(Some(v1101));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Ushr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1018 = constructor_ushr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 140.
                                        returns.extend(Some(v1018));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v719 = C::value_type(ctx, v27);
                                            let v1010 = C::fits_in_64(ctx, v719);
                                            if let Some(v1011) = v1010 {
                                                let v1013 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 118.
                                                returns.extend(Some(v1013));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1013 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 119.
                                            returns.extend(Some(v1013));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1013 = constructor_ushr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 120.
                                            returns.extend(Some(v1013));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v174 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v175) = v174 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v164,
                                                                            arg: v165,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Uextend = v164 {
                                                                                let v166 = C::value_type(ctx, v165);
                                                                                let v176 = C::ty_equal(ctx, v166, v175);
                                                                                if v176 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                    let v178 = C::u64_eq(ctx, v16, v177);
                                                                                    if v178 == true {
                                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                        let mut v167 = v167.into_context_iter();
                                                                                        while let Some(v168) = v167.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v171,
                                                                                                arg: v172,
                                                                                            } = &v168.1 {
                                                                                                if let &Opcode::Uextend = v171 {
                                                                                                    let v173 = C::value_type(ctx, v172);
                                                                                                    if v166 == v173 {
                                                                                                        let v181 = constructor_umulhi(ctx, v166, v165, v172);
                                                                                                        let v182 = constructor_uextend(ctx, v2.0, v181);
                                                                                                        // Rule at src/opts/arithmetic.isle line 164.
                                                                                                        returns.extend(Some(v182));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            let v124 =
                                                                C::unpack_value_array_2(ctx, v123);
                                                            let mut v167 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v124.1, &mut v167,
                                                            );
                                                            let mut v167 = v167.into_context_iter();
                                                            while let Some(v168) = v167.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v194,
                                                                    imm: v195,
                                                                } = &v168.1 {
                                                                    if let &Opcode::Iconst = v194 {
                                                                        if v15 == v195 {
                                                                            let v494 = C::fits_in_64(ctx, v2.0);
                                                                            if let Some(v495) = v494 {
                                                                                let v784 = C::ty_int(ctx, v495);
                                                                                if let Some(v785) = v784 {
                                                                                    if v19.0 == v785 {
                                                                                        let v981 = C::ty_mask(ctx, v785);
                                                                                        let v982 = C::imm64(ctx, v981);
                                                                                        let v983 = C::imm64_ushr(ctx, v785, v982, v195);
                                                                                        let v984 = constructor_iconst(ctx, v785, v983);
                                                                                        let v985 = constructor_band(ctx, v785, v124.0, v984);
                                                                                        // Rule at src/opts/shifts.isle line 41.
                                                                                        returns.extend(Some(v985));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            let v992 = C::u64_is_zero(ctx, v196);
                                                                            if v992 == false {
                                                                                let v993 = C::ty_bits(ctx, v2.0);
                                                                                let v994 = C::u8_as_u64(ctx, v993);
                                                                                let v995 = C::u64_sub(ctx, v994, v196);
                                                                                let v996 = constructor_shift_amt_to_type(ctx, v995);
                                                                                if let Some(v997) = v996 {
                                                                                    if v2.0 == v19.0 {
                                                                                        let v998 = constructor_ireduce(ctx, v997, v124.0);
                                                                                        let v1000 = constructor_uextend(ctx, v2.0, v998);
                                                                                        // Rule at src/opts/shifts.isle line 88.
                                                                                        returns.extend(Some(v1000));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ushr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1022 = C::u64_and(ctx, v196, v203);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1023 = C::u64_and(ctx, v16, v203);
                                                                            let v1024 = C::u64_add(ctx, v1022, v1023);
                                                                            let v1025 = C::lane_type(ctx, v2.0);
                                                                            let v1026 = C::ty_bits_u64(ctx, v1025);
                                                                            let v1027 = C::u64_lt(ctx, v1024, v1026);
                                                                            if v1027 == true {
                                                                                let v1028 = constructor_iconst_u(ctx, v168.0, v1024);
                                                                                let v1030 = constructor_ushr(ctx, v2.0, v124.0, v1028);
                                                                                // Rule at src/opts/shifts.isle line 161.
                                                                                returns.extend(Some(v1030));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                            let v986 = C::ty_bits_u64(ctx, v2.0);
                                                                            let v1032 = C::u64_le(ctx, v986, v1024);
                                                                            if v1032 == true {
                                                                                let v693 = constructor_iconst_u(ctx, v2.0, 0x0);
                                                                                let v694 = C::subsume(ctx, v693);
                                                                                // Rule at src/opts/shifts.isle line 193.
                                                                                returns.extend(Some(v694));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v585,
                                                                        imm: v586,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v585 {
                                                                            let v650 = constructor_ushr(ctx, v2.0, v124.0, v7.1);
                                                                            let v651 = constructor_ushr(ctx, v2.0, v650, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 216.
                                                                            returns.extend(Some(v651));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v494 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v495) = v494 {
                                                            if v19.0 == v495 {
                                                                let v540 = C::imm64_ushr(
                                                                    ctx, v495, v23, v15,
                                                                );
                                                                let v541 = constructor_iconst(
                                                                    ctx, v495, v540,
                                                                );
                                                                let v542 = C::subsume(ctx, v541);
                                                                // Rule at src/opts/cprop.isle line 63.
                                                                returns.extend(Some(v542));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 8.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1023 = C::u64_and(ctx, v16, v203);
                                        let v1051 = C::u64_eq(ctx, v16, v1023);
                                        if v1051 == false {
                                            let v1052 = constructor_iconst_u(ctx, v11.0, v1023);
                                            let v1054 = constructor_ushr(ctx, v2.0, v7.0, v1052);
                                            // Rule at src/opts/shifts.isle line 296.
                                            returns.extend(Some(v1054));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1025 = C::lane_type(ctx, v2.0);
                                        let v1102 = constructor_ushr(ctx, v1025, v30, v7.1);
                                        let v1103 = constructor_splat(ctx, v2.0, v1102);
                                        // Rule at src/opts/vector.isle line 78.
                                        returns.extend(Some(v1103));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Sshr => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            match &v11.1 {
                                &InstructionData::Binary {
                                    opcode: ref v104,
                                    args: ref v105,
                                } => {
                                    if let &Opcode::Iconcat = v104 {
                                        let v106 = C::unpack_value_array_2(ctx, v105);
                                        let v1019 = constructor_sshr(ctx, v2.0, v7.0, v106.0);
                                        // Rule at src/opts/shifts.isle line 141.
                                        returns.extend(Some(v1019));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v26,
                                    arg: v27,
                                } => {
                                    match v26 {
                                        &Opcode::Ireduce => {
                                            let v719 = C::value_type(ctx, v27);
                                            let v1010 = C::fits_in_64(ctx, v719);
                                            if let Some(v1011) = v1010 {
                                                let v1014 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                                // Rule at src/opts/shifts.isle line 121.
                                                returns.extend(Some(v1014));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v1014 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 122.
                                            returns.extend(Some(v1014));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v1014 = constructor_sshr(ctx, v2.0, v7.0, v27);
                                            // Rule at src/opts/shifts.isle line 123.
                                            returns.extend(Some(v1014));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v14,
                                    imm: v15,
                                } => {
                                    if let &Opcode::Iconst = v14 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            match &v19.1 {
                                                &InstructionData::Binary {
                                                    opcode: ref v122,
                                                    args: ref v123,
                                                } => {
                                                    match v122 {
                                                        &Opcode::Imul => {
                                                            let v174 = C::ty_half_width(ctx, v2.0);
                                                            if let Some(v175) = v174 {
                                                                if v2.0 == v19.0 {
                                                                    let v124 =
                                                                        C::unpack_value_array_2(
                                                                            ctx, v123,
                                                                        );
                                                                    let mut v127 = C::inst_data_etor_returns::default();
                                                                    C::inst_data_etor(
                                                                        ctx, v124.0, &mut v127,
                                                                    );
                                                                    let mut v127 =
                                                                        v127.into_context_iter();
                                                                    while let Some(v128) =
                                                                        v127.next(ctx)
                                                                    {
                                                                        if let &InstructionData::Unary {
                                                                            opcode: ref v164,
                                                                            arg: v165,
                                                                        } = &v128.1 {
                                                                            if let &Opcode::Sextend = v164 {
                                                                                let v166 = C::value_type(ctx, v165);
                                                                                let v176 = C::ty_equal(ctx, v166, v175);
                                                                                if v176 == true {
                                                                                    let v16 = C::u64_from_imm64(ctx, v15);
                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                    let v178 = C::u64_eq(ctx, v16, v177);
                                                                                    if v178 == true {
                                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                                        C::inst_data_etor(ctx, v124.1, &mut v167);
                                                                                        let mut v167 = v167.into_context_iter();
                                                                                        while let Some(v168) = v167.next(ctx) {
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v171,
                                                                                                arg: v172,
                                                                                            } = &v168.1 {
                                                                                                if let &Opcode::Sextend = v171 {
                                                                                                    let v173 = C::value_type(ctx, v172);
                                                                                                    if v166 == v173 {
                                                                                                        let v179 = constructor_smulhi(ctx, v166, v165, v172);
                                                                                                        let v180 = constructor_sextend(ctx, v2.0, v179);
                                                                                                        // Rule at src/opts/arithmetic.isle line 158.
                                                                                                        returns.extend(Some(v180));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Bor => {
                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                            let v203 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v204 = C::u64_eq(ctx, v16, v203);
                                                            if v204 == true {
                                                                if v2.0 == v11.0 {
                                                                    if v2.0 == v19.0 {
                                                                        let v124 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v123,
                                                                            );
                                                                        let mut v127 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.0, &mut v127,
                                                                        );
                                                                        let mut v127 = v127
                                                                            .into_context_iter();
                                                                        while let Some(v128) =
                                                                            v127.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v164,
                                                                                arg: v165,
                                                                            } = &v128.1 {
                                                                                if let &Opcode::Ineg = v164 {
                                                                                    if v2.0 == v128.0 {
                                                                                        if v124.1 == v165 {
                                                                                            let v206 = constructor_bmask(ctx, v2.0, v165);
                                                                                            // Rule at src/opts/bitops.isle line 89.
                                                                                            returns.extend(Some(v206));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                        let mut v167 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v124.1, &mut v167,
                                                                        );
                                                                        let mut v167 = v167
                                                                            .into_context_iter();
                                                                        while let Some(v168) =
                                                                            v167.next(ctx)
                                                                        {
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v171,
                                                                                arg: v172,
                                                                            } = &v168.1 {
                                                                                if let &Opcode::Ineg = v171 {
                                                                                    if v124.0 == v172 {
                                                                                        if v2.0 == v168.0 {
                                                                                            let v205 = constructor_bmask(ctx, v2.0, v124.0);
                                                                                            // Rule at src/opts/bitops.isle line 85.
                                                                                            returns.extend(Some(v205));
                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Ishl => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            if v16 == v196 {
                                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v124.0, &mut v127);
                                                                                let mut v127 = v127.into_context_iter();
                                                                                while let Some(v128) = v127.next(ctx) {
                                                                                    if let &InstructionData::Unary {
                                                                                        opcode: ref v164,
                                                                                        arg: v165,
                                                                                    } = &v128.1 {
                                                                                        match v164 {
                                                                                            &Opcode::Uextend => {
                                                                                                if v2.0 == v128.0 {
                                                                                                    let v986 = C::ty_bits_u64(ctx, v2.0);
                                                                                                    let v166 = C::value_type(ctx, v165);
                                                                                                    let v177 = C::ty_bits_u64(ctx, v166);
                                                                                                    let v987 = C::u64_sub(ctx, v986, v177);
                                                                                                    let v988 = C::u64_eq(ctx, v196, v987);
                                                                                                    if v988 == true {
                                                                                                        let v989 = constructor_sextend(ctx, v2.0, v165);
                                                                                                        // Rule at src/opts/shifts.isle line 50.
                                                                                                        returns.extend(Some(v989));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                    let v990 = C::u64_lt(ctx, v196, v987);
                                                                                                    if v990 == true {
                                                                                                        // Rule at src/opts/shifts.isle line 61.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            &Opcode::Sextend => {
                                                                                                let v986 = C::ty_bits_u64(ctx, v2.0);
                                                                                                let v166 = C::value_type(ctx, v165);
                                                                                                let v177 = C::ty_bits_u64(ctx, v166);
                                                                                                let v987 = C::u64_sub(ctx, v986, v177);
                                                                                                let v991 = C::u64_le(ctx, v196, v987);
                                                                                                if v991 == true {
                                                                                                    if v2.0 == v128.0 {
                                                                                                        // Rule at src/opts/shifts.isle line 71.
                                                                                                        returns.extend(Some(v124.0));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                            _ => {}
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            if v15 == v195 {
                                                                                let v992 = C::u64_is_zero(ctx, v196);
                                                                                if v992 == false {
                                                                                    let v993 = C::ty_bits(ctx, v2.0);
                                                                                    let v994 = C::u8_as_u64(ctx, v993);
                                                                                    let v995 = C::u64_sub(ctx, v994, v196);
                                                                                    let v996 = constructor_shift_amt_to_type(ctx, v995);
                                                                                    if let Some(v997) = v996 {
                                                                                        let v998 = constructor_ireduce(ctx, v997, v124.0);
                                                                                        let v999 = constructor_sextend(ctx, v2.0, v998);
                                                                                        // Rule at src/opts/shifts.isle line 84.
                                                                                        returns.extend(Some(v999));
                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        &Opcode::Sshr => {
                                                            if v2.0 == v19.0 {
                                                                let v124 = C::unpack_value_array_2(
                                                                    ctx, v123,
                                                                );
                                                                let mut v127 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.0, &mut v127,
                                                                );
                                                                let mut v127 =
                                                                    v127.into_context_iter();
                                                                while let Some(v128) =
                                                                    v127.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v585,
                                                                        imm: v586,
                                                                    } = &v128.1 {
                                                                        if let &Opcode::Iconst = v585 {
                                                                            let v652 = constructor_sshr(ctx, v2.0, v124.0, v7.1);
                                                                            let v653 = constructor_sshr(ctx, v2.0, v652, v124.1);
                                                                            // Rule at src/opts/cprop.isle line 218.
                                                                            returns.extend(Some(v653));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                                let mut v167 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v124.1, &mut v167,
                                                                );
                                                                let mut v167 =
                                                                    v167.into_context_iter();
                                                                while let Some(v168) =
                                                                    v167.next(ctx)
                                                                {
                                                                    if let &InstructionData::UnaryImm {
                                                                        opcode: ref v194,
                                                                        imm: v195,
                                                                    } = &v168.1 {
                                                                        if let &Opcode::Iconst = v194 {
                                                                            let v196 = C::u64_from_imm64(ctx, v195);
                                                                            let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                                                            let v1022 = C::u64_and(ctx, v196, v203);
                                                                            let v16 = C::u64_from_imm64(ctx, v15);
                                                                            let v1023 = C::u64_and(ctx, v16, v203);
                                                                            let v1024 = C::u64_add(ctx, v1022, v1023);
                                                                            let v1025 = C::lane_type(ctx, v2.0);
                                                                            let v1026 = C::ty_bits_u64(ctx, v1025);
                                                                            let v1027 = C::u64_lt(ctx, v1024, v1026);
                                                                            if v1027 == true {
                                                                                let v1028 = constructor_iconst_u(ctx, v168.0, v1024);
                                                                                let v1031 = constructor_sshr(ctx, v2.0, v124.0, v1028);
                                                                                // Rule at src/opts/shifts.isle line 170.
                                                                                returns.extend(Some(v1031));
                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                                &InstructionData::UnaryImm {
                                                    opcode: ref v22,
                                                    imm: v23,
                                                } => {
                                                    if let &Opcode::Iconst = v22 {
                                                        let v494 = C::fits_in_64(ctx, v2.0);
                                                        if let Some(v495) = v494 {
                                                            if v19.0 == v495 {
                                                                let v543 = C::imm64_sshr(
                                                                    ctx, v495, v23, v15,
                                                                );
                                                                let v544 = constructor_iconst(
                                                                    ctx, v495, v543,
                                                                );
                                                                let v545 = C::subsume(ctx, v544);
                                                                // Rule at src/opts/cprop.isle line 68.
                                                                returns.extend(Some(v545));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        let v16 = C::u64_from_imm64(ctx, v15);
                                        if v16 == 0x0 {
                                            if v2.0 == v11.0 {
                                                let v17 = C::subsume(ctx, v7.0);
                                                // Rule at src/opts/shifts.isle line 12.
                                                returns.extend(Some(v17));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        let v203 = constructor_ty_shift_mask(ctx, v2.0);
                                        let v1023 = C::u64_and(ctx, v16, v203);
                                        let v1051 = C::u64_eq(ctx, v16, v1023);
                                        if v1051 == false {
                                            let v1052 = constructor_iconst_u(ctx, v11.0, v1023);
                                            let v1055 = constructor_sshr(ctx, v2.0, v7.0, v1052);
                                            // Rule at src/opts/shifts.isle line 299.
                                            returns.extend(Some(v1055));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let mut v18 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.0, &mut v18);
                        let mut v18 = v18.into_context_iter();
                        while let Some(v19) = v18.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v29,
                                arg: v30,
                            } = &v19.1
                            {
                                if let &Opcode::Splat = v29 {
                                    if v2.0 == v19.0 {
                                        let v1025 = C::lane_type(ctx, v2.0);
                                        let v1104 = constructor_sshr(ctx, v1025, v30, v7.1);
                                        let v1105 = constructor_splat(ctx, v2.0, v1104);
                                        // Rule at src/opts/vector.isle line 81.
                                        returns.extend(Some(v1105));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fmul => {
                        let v7 = C::unpack_value_array_2(ctx, v6);
                        let mut v10 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v7.1, &mut v10);
                        let mut v10 = v10.into_context_iter();
                        while let Some(v11) = v10.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v26,
                                arg: v27,
                            } = &v11.1
                            {
                                if let &Opcode::Fneg = v26 {
                                    if v2.0 == v11.0 {
                                        let mut v18 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v7.0, &mut v18);
                                        let mut v18 = v18.into_context_iter();
                                        while let Some(v19) = v18.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v29,
                                                arg: v30,
                                            } = &v19.1
                                            {
                                                if let &Opcode::Fneg = v29 {
                                                    if v2.0 == v19.0 {
                                                        let v103 =
                                                            constructor_fmul(ctx, v2.0, v30, v27);
                                                        // Rule at src/opts/arithmetic.isle line 114.
                                                        returns.extend(Some(v103));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v221,
                args: ref v222,
                cond: ref v223,
            } => {
                if let &Opcode::Icmp = v221 {
                    match v223 {
                        &IntCC::Equal => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v561 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.0, &mut v561);
                            let mut v561 = v561.into_context_iter();
                            while let Some(v562) = v561.next(ctx) {
                                match &v562.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v941,
                                        args: ref v942,
                                    } => {
                                        if let &Opcode::Isub = v941 {
                                            if v562.0 == I8 {
                                                let mut v698 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                                                let mut v698 = v698.into_context_iter();
                                                while let Some(v699) = v698.next(ctx) {
                                                    let v700 = C::iconst_sextend_etor(ctx, v699);
                                                    if let Some(v701) = v700 {
                                                        match v701.1 {
                                                            -0x1 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v968 = constructor_slt(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 179.
                                                                                                                returns.extend(Some(v968));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v969 = constructor_ult(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 181.
                                                                                                                returns.extend(Some(v969));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v966 = constructor_eq(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 146.
                                                                                                                returns.extend(Some(v966));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v966 = constructor_eq(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 148.
                                                                                                                returns.extend(Some(v966));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v972 = constructor_sgt(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 187.
                                                                                                                returns.extend(Some(v972));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v973 = constructor_ugt(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 189.
                                                                                                                returns.extend(Some(v973));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v690,
                                        arg: v691,
                                    } => {
                                        if let &Opcode::Sextend = v690 {
                                            let mut v698 =
                                                C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                                            let mut v698 = v698.into_context_iter();
                                            while let Some(v699) = v698.next(ctx) {
                                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                                if let Some(v701) = v700 {
                                                    if v701.1 == 0x0 {
                                                        let v692 = C::value_type(ctx, v691);
                                                        let v705 =
                                                            constructor_iconst_s(ctx, v692, 0x0);
                                                        let v706 =
                                                            constructor_eq(ctx, v692, v691, v705);
                                                        // Rule at src/opts/extends.isle line 40.
                                                        returns.extend(Some(v706));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v737 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v738 = C::subsume(ctx, v737);
                                    // Rule at src/opts/icmp.isle line 5.
                                    returns.extend(Some(v738));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        if v233 == 0x0 {
                                            let mut v739 = C::uextend_maybe_etor_returns::default();
                                            C::uextend_maybe_etor(ctx, v224.0, &mut v739);
                                            let mut v739 = v739.into_context_iter();
                                            while let Some(v740) = v739.next(ctx) {
                                                let mut v743 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v740.1, &mut v743);
                                                let mut v743 = v743.into_context_iter();
                                                while let Some(v744) = v743.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v747,
                                                        args: ref v748,
                                                        cond: ref v749,
                                                    } = &v744.1
                                                    {
                                                        if let &Opcode::Icmp = v747 {
                                                            if v2.0 == v744.0 {
                                                                let v754 =
                                                                    &C::intcc_complement(ctx, v749);
                                                                let v750 = C::unpack_value_array_2(
                                                                    ctx, v748,
                                                                );
                                                                let v755 = constructor_icmp(
                                                                    ctx, v2.0, v754, v750.0, v750.1,
                                                                );
                                                                let v756 = C::subsume(ctx, v755);
                                                                // Rule at src/opts/icmp.isle line 22.
                                                                returns.extend(Some(v756));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        &IntCC::NotEqual => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v561 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.0, &mut v561);
                            let mut v561 = v561.into_context_iter();
                            while let Some(v562) = v561.next(ctx) {
                                match &v562.1 {
                                    &InstructionData::Binary {
                                        opcode: ref v941,
                                        args: ref v942,
                                    } => {
                                        if let &Opcode::Isub = v941 {
                                            if v562.0 == I8 {
                                                let mut v698 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                                                let mut v698 = v698.into_context_iter();
                                                while let Some(v699) = v698.next(ctx) {
                                                    let v700 = C::iconst_sextend_etor(ctx, v699);
                                                    if let Some(v701) = v700 {
                                                        match v701.1 {
                                                            -0x1 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v974 = constructor_sge(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 183.
                                                                                                                returns.extend(Some(v974));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v975 = constructor_uge(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 185.
                                                                                                                returns.extend(Some(v975));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x0 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v967 = constructor_ne(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 151.
                                                                                                                returns.extend(Some(v967));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v967 = constructor_ne(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 153.
                                                                                                                returns.extend(Some(v967));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1 => {
                                                                let v943 = C::unpack_value_array_2(
                                                                    ctx, v942,
                                                                );
                                                                let mut v946 = C::inst_data_etor_returns::default();
                                                                C::inst_data_etor(
                                                                    ctx, v943.0, &mut v946,
                                                                );
                                                                let mut v946 =
                                                                    v946.into_context_iter();
                                                                while let Some(v947) =
                                                                    v946.next(ctx)
                                                                {
                                                                    if let &InstructionData::IntCompare {
                                                                        opcode: ref v950,
                                                                        args: ref v951,
                                                                        cond: ref v952,
                                                                    } = &v947.1 {
                                                                        if let &Opcode::Icmp = v950 {
                                                                            match v952 {
                                                                                &IntCC::SignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::SignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v970 = constructor_sle(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 191.
                                                                                                                returns.extend(Some(v970));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                    let mut v956 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                    let mut v956 = v956.into_context_iter();
                                                                                    while let Some(v957) = v956.next(ctx) {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v960,
                                                                                            args: ref v961,
                                                                                            cond: ref v962,
                                                                                        } = &v957.1 {
                                                                                            if let &Opcode::Icmp = v960 {
                                                                                                if let &IntCC::UnsignedLessThan = v962 {
                                                                                                    if v947.0 == v957.0 {
                                                                                                        let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                        let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                        if v953.0 == v963.0 {
                                                                                                            if v953.1 == v963.1 {
                                                                                                                let v971 = constructor_ule(ctx, v947.0, v953.0, v953.1);
                                                                                                                // Rule at src/opts/spaceship.isle line 193.
                                                                                                                returns.extend(Some(v971));
                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &InstructionData::Unary {
                                        opcode: ref v690,
                                        arg: v691,
                                    } => {
                                        if let &Opcode::Sextend = v690 {
                                            let mut v698 =
                                                C::inst_data_tupled_etor_returns::default();
                                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                                            let mut v698 = v698.into_context_iter();
                                            while let Some(v699) = v698.next(ctx) {
                                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                                if let Some(v701) = v700 {
                                                    if v701.1 == 0x0 {
                                                        let v692 = C::value_type(ctx, v691);
                                                        let v705 =
                                                            constructor_iconst_s(ctx, v692, 0x0);
                                                        let v707 =
                                                            constructor_ne(ctx, v692, v691, v705);
                                                        // Rule at src/opts/extends.isle line 42.
                                                        returns.extend(Some(v707));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        if v233 == 0x0 {
                                            let mut v234 =
                                                ContextIterWrapper::<ConstructorVec<_>, _>::default(
                                                );
                                            constructor_truthy(ctx, v224.0, &mut v234);
                                            let mut v234 = v234.into_context_iter();
                                            while let Some(v235) = v234.next(ctx) {
                                                let v236 = C::value_type(ctx, v235);
                                                let v237 =
                                                    C::ty_int_ref_scalar_64_extract(ctx, v236);
                                                if let Some(v238) = v237 {
                                                    let v239 = constructor_iconst_u(ctx, v238, 0x0);
                                                    let v240 =
                                                        constructor_ne(ctx, v2.0, v235, v239);
                                                    // Rule at src/opts/bitops.isle line 120.
                                                    returns.extend(Some(v240));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let mut v739 = C::uextend_maybe_etor_returns::default();
                                            C::uextend_maybe_etor(ctx, v224.0, &mut v739);
                                            let mut v739 = v739.into_context_iter();
                                            while let Some(v740) = v739.next(ctx) {
                                                let mut v743 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v740.1, &mut v743);
                                                let mut v743 = v743.into_context_iter();
                                                while let Some(v744) = v743.next(ctx) {
                                                    if let &InstructionData::IntCompare {
                                                        opcode: ref v747,
                                                        args: ref v748,
                                                        cond: ref v749,
                                                    } = &v744.1
                                                    {
                                                        if let &Opcode::Icmp = v747 {
                                                            if v2.0 == v744.0 {
                                                                let v753 = C::subsume(ctx, v740.1);
                                                                // Rule at src/opts/icmp.isle line 17.
                                                                returns.extend(Some(v753));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if v224.0 == v224.1 {
                                let v52 = C::ty_int(ctx, v2.0);
                                if let Some(v53) = v52 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src/opts/icmp.isle line 6.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v698 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                            let mut v698 = v698.into_context_iter();
                            while let Some(v699) = v698.next(ctx) {
                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                if let Some(v701) = v700 {
                                    match v701.1 {
                                        -0x1 => {
                                            let v815 = constructor_iconst_s(ctx, v701.0, 0x0);
                                            let v818 = constructor_sge(ctx, v2.0, v224.0, v815);
                                            // Rule at src/opts/icmp.isle line 150.
                                            returns.extend(Some(v818));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        0x0 => {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v941,
                                                        args: ref v942,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Isub = v941 {
                                                            let v943 =
                                                                C::unpack_value_array_2(ctx, v942);
                                                            let mut v946 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v943.0, &mut v946,
                                                            );
                                                            let mut v946 = v946.into_context_iter();
                                                            while let Some(v947) = v946.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v950,
                                                                    args: ref v951,
                                                                    cond: ref v952,
                                                                } = &v947.1 {
                                                                    if let &Opcode::Icmp = v950 {
                                                                        match v952 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::SignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v972 = constructor_sgt(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 167.
                                                                                                            returns.extend(Some(v972));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::UnsignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v973 = constructor_ugt(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 169.
                                                                                                            returns.extend(Some(v973));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v494 = C::fits_in_64(ctx, v2.0);
                            if let Some(v495) = v494 {
                                let v784 = C::ty_int(ctx, v495);
                                if let Some(v785) = v784 {
                                    let mut v227 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v224.1, &mut v227);
                                    let mut v227 = v227.into_context_iter();
                                    while let Some(v228) = v227.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v231,
                                            imm: v232,
                                        } = &v228.1
                                        {
                                            if let &Opcode::Iconst = v231 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                let v794 = C::ty_smin(ctx, v228.0);
                                                let v795 = C::u64_eq(ctx, v233, v794);
                                                if v795 == true {
                                                    let v789 =
                                                        constructor_ne(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 98.
                                                    returns.extend(Some(v789));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v796 = C::ty_smax(ctx, v228.0);
                                                let v797 = C::u64_eq(ctx, v233, v796);
                                                if v797 == true {
                                                    let v786 = constructor_iconst_u(ctx, v785, 0x0);
                                                    let v787 = C::subsume(ctx, v786);
                                                    // Rule at src/opts/icmp.isle line 118.
                                                    returns.extend(Some(v787));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src/opts/icmp.isle line 9.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            let v784 = C::ty_int(ctx, v495);
                                            if let Some(v785) = v784 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                let v794 = C::ty_smin(ctx, v228.0);
                                                let v795 = C::u64_eq(ctx, v233, v794);
                                                if v795 == true {
                                                    let v790 = constructor_iconst_u(ctx, v785, 0x1);
                                                    let v791 = C::subsume(ctx, v790);
                                                    // Rule at src/opts/icmp.isle line 103.
                                                    returns.extend(Some(v791));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v796 = C::ty_smax(ctx, v228.0);
                                                let v797 = C::u64_eq(ctx, v233, v796);
                                                if v797 == true {
                                                    let v788 =
                                                        constructor_eq(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 123.
                                                    returns.extend(Some(v788));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        if v233 == 0x0 {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v690,
                                                        arg: v691,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Uextend = v690 {
                                                            let v692 = C::value_type(ctx, v691);
                                                            if v692 == I32 {
                                                                let v696 = constructor_iconst_u(
                                                                    ctx, v2.0, 0x1,
                                                                );
                                                                let v697 = C::subsume(ctx, v696);
                                                                // Rule at src/opts/extends.isle line 33.
                                                                returns.extend(Some(v697));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v698 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                            let mut v698 = v698.into_context_iter();
                            while let Some(v699) = v698.next(ctx) {
                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                if let Some(v701) = v700 {
                                    match v701.1 {
                                        0x0 => {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v941,
                                                        args: ref v942,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Isub = v941 {
                                                            let v943 =
                                                                C::unpack_value_array_2(ctx, v942);
                                                            let mut v946 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v943.0, &mut v946,
                                                            );
                                                            let mut v946 = v946.into_context_iter();
                                                            while let Some(v947) = v946.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v950,
                                                                    args: ref v951,
                                                                    cond: ref v952,
                                                                } = &v947.1 {
                                                                    if let &Opcode::Icmp = v950 {
                                                                        match v952 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::SignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v974 = constructor_sge(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 172.
                                                                                                            returns.extend(Some(v974));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::UnsignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v975 = constructor_uge(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 174.
                                                                                                            returns.extend(Some(v975));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v815 = constructor_iconst_s(ctx, v701.0, 0x0);
                                            let v816 = constructor_sgt(ctx, v2.0, v224.0, v815);
                                            // Rule at src/opts/icmp.isle line 144.
                                            returns.extend(Some(v816));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v737 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v738 = C::subsume(ctx, v737);
                                    // Rule at src/opts/icmp.isle line 10.
                                    returns.extend(Some(v738));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            let v784 = C::ty_int(ctx, v495);
                                            if let Some(v785) = v784 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                let v794 = C::ty_smin(ctx, v228.0);
                                                let v795 = C::u64_eq(ctx, v233, v794);
                                                if v795 == true {
                                                    let v786 = constructor_iconst_u(ctx, v785, 0x0);
                                                    let v787 = C::subsume(ctx, v786);
                                                    // Rule at src/opts/icmp.isle line 88.
                                                    returns.extend(Some(v787));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v796 = C::ty_smax(ctx, v228.0);
                                                let v797 = C::u64_eq(ctx, v233, v796);
                                                if v797 == true {
                                                    let v789 =
                                                        constructor_ne(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 108.
                                                    returns.extend(Some(v789));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        if v233 == 0x0 {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I64 {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v690,
                                                        arg: v691,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Uextend = v690 {
                                                            let v692 = C::value_type(ctx, v691);
                                                            if v692 == I32 {
                                                                let v693 = constructor_iconst_u(
                                                                    ctx, v2.0, 0x0,
                                                                );
                                                                let v694 = C::subsume(ctx, v693);
                                                                // Rule at src/opts/extends.isle line 28.
                                                                returns.extend(Some(v694));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let mut v698 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                            let mut v698 = v698.into_context_iter();
                            while let Some(v699) = v698.next(ctx) {
                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                if let Some(v701) = v700 {
                                    match v701.1 {
                                        0x0 => {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v941,
                                                        args: ref v942,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Isub = v941 {
                                                            let v943 =
                                                                C::unpack_value_array_2(ctx, v942);
                                                            let mut v946 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v943.0, &mut v946,
                                                            );
                                                            let mut v946 = v946.into_context_iter();
                                                            while let Some(v947) = v946.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v950,
                                                                    args: ref v951,
                                                                    cond: ref v952,
                                                                } = &v947.1 {
                                                                    if let &Opcode::Icmp = v950 {
                                                                        match v952 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::SignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v968 = constructor_slt(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 157.
                                                                                                            returns.extend(Some(v968));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::UnsignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v969 = constructor_ult(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 159.
                                                                                                            returns.extend(Some(v969));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v815 = constructor_iconst_s(ctx, v701.0, 0x0);
                                            let v817 = constructor_sle(ctx, v2.0, v224.0, v815);
                                            // Rule at src/opts/icmp.isle line 147.
                                            returns.extend(Some(v817));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src/opts/icmp.isle line 13.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v698 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                            let mut v698 = v698.into_context_iter();
                            while let Some(v699) = v698.next(ctx) {
                                let v700 = C::iconst_sextend_etor(ctx, v699);
                                if let Some(v701) = v700 {
                                    match v701.1 {
                                        -0x1 => {
                                            let v815 = constructor_iconst_s(ctx, v701.0, 0x0);
                                            let v819 = constructor_slt(ctx, v2.0, v224.0, v815);
                                            // Rule at src/opts/icmp.isle line 153.
                                            returns.extend(Some(v819));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        0x0 => {
                                            let mut v561 = C::inst_data_etor_returns::default();
                                            C::inst_data_etor(ctx, v224.0, &mut v561);
                                            let mut v561 = v561.into_context_iter();
                                            while let Some(v562) = v561.next(ctx) {
                                                if v562.0 == I8 {
                                                    if let &InstructionData::Binary {
                                                        opcode: ref v941,
                                                        args: ref v942,
                                                    } = &v562.1
                                                    {
                                                        if let &Opcode::Isub = v941 {
                                                            let v943 =
                                                                C::unpack_value_array_2(ctx, v942);
                                                            let mut v946 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v943.0, &mut v946,
                                                            );
                                                            let mut v946 = v946.into_context_iter();
                                                            while let Some(v947) = v946.next(ctx) {
                                                                if let &InstructionData::IntCompare {
                                                                    opcode: ref v950,
                                                                    args: ref v951,
                                                                    cond: ref v952,
                                                                } = &v947.1 {
                                                                    if let &Opcode::Icmp = v950 {
                                                                        match v952 {
                                                                            &IntCC::SignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::SignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v970 = constructor_sle(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 162.
                                                                                                            returns.extend(Some(v970));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            &IntCC::UnsignedGreaterThan => {
                                                                                let mut v956 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(ctx, v943.1, &mut v956);
                                                                                let mut v956 = v956.into_context_iter();
                                                                                while let Some(v957) = v956.next(ctx) {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v960,
                                                                                        args: ref v961,
                                                                                        cond: ref v962,
                                                                                    } = &v957.1 {
                                                                                        if let &Opcode::Icmp = v960 {
                                                                                            if let &IntCC::UnsignedLessThan = v962 {
                                                                                                if v947.0 == v957.0 {
                                                                                                    let v953 = C::unpack_value_array_2(ctx, v951);
                                                                                                    let v963 = C::unpack_value_array_2(ctx, v961);
                                                                                                    if v953.0 == v963.0 {
                                                                                                        if v953.1 == v963.1 {
                                                                                                            let v971 = constructor_ule(ctx, v947.0, v953.0, v953.1);
                                                                                                            // Rule at src/opts/spaceship.isle line 164.
                                                                                                            returns.extend(Some(v971));
                                                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                            _ => {}
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v494 = C::fits_in_64(ctx, v2.0);
                            if let Some(v495) = v494 {
                                let v784 = C::ty_int(ctx, v495);
                                if let Some(v785) = v784 {
                                    let mut v227 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v224.1, &mut v227);
                                    let mut v227 = v227.into_context_iter();
                                    while let Some(v228) = v227.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v231,
                                            imm: v232,
                                        } = &v228.1
                                        {
                                            if let &Opcode::Iconst = v231 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                let v794 = C::ty_smin(ctx, v228.0);
                                                let v795 = C::u64_eq(ctx, v233, v794);
                                                if v795 == true {
                                                    let v788 =
                                                        constructor_eq(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 93.
                                                    returns.extend(Some(v788));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v796 = C::ty_smax(ctx, v228.0);
                                                let v797 = C::u64_eq(ctx, v233, v796);
                                                if v797 == true {
                                                    let v790 = constructor_iconst_u(ctx, v785, 0x1);
                                                    let v791 = C::subsume(ctx, v790);
                                                    // Rule at src/opts/icmp.isle line 113.
                                                    returns.extend(Some(v791));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v737 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v738 = C::subsume(ctx, v737);
                                    // Rule at src/opts/icmp.isle line 14.
                                    returns.extend(Some(v738));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v494 = C::fits_in_64(ctx, v2.0);
                            if let Some(v495) = v494 {
                                let v784 = C::ty_int(ctx, v495);
                                if let Some(v785) = v784 {
                                    let v224 = C::unpack_value_array_2(ctx, v222);
                                    let mut v227 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v224.1, &mut v227);
                                    let mut v227 = v227.into_context_iter();
                                    while let Some(v228) = v227.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v231,
                                            imm: v232,
                                        } = &v228.1
                                        {
                                            if let &Opcode::Iconst = v231 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                if v233 == 0x0 {
                                                    let v789 =
                                                        constructor_ne(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 60.
                                                    returns.extend(Some(v789));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v792 = C::ty_umax(ctx, v228.0);
                                                let v793 = C::u64_eq(ctx, v233, v792);
                                                if v793 == true {
                                                    let v786 = constructor_iconst_u(ctx, v785, 0x0);
                                                    let v787 = C::subsume(ctx, v786);
                                                    // Rule at src/opts/icmp.isle line 78.
                                                    returns.extend(Some(v787));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v224 = C::unpack_value_array_2(ctx, v222);
                                if v224.0 == v224.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src/opts/icmp.isle line 7.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        match v233 {
                                            0x0 => {
                                                let v494 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v495) = v494 {
                                                    let v784 = C::ty_int(ctx, v495);
                                                    if let Some(v785) = v784 {
                                                        let v790 =
                                                            constructor_iconst_u(ctx, v785, 0x1);
                                                        let v791 = C::subsume(ctx, v790);
                                                        // Rule at src/opts/icmp.isle line 64.
                                                        returns.extend(Some(v791));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v812 = constructor_iconst_u(ctx, v228.0, 0x0);
                                                let v813 = constructor_ne(ctx, v2.0, v224.0, v812);
                                                // Rule at src/opts/icmp.isle line 138.
                                                returns.extend(Some(v813));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            let v784 = C::ty_int(ctx, v495);
                                            if let Some(v785) = v784 {
                                                let v792 = C::ty_umax(ctx, v228.0);
                                                let v793 = C::u64_eq(ctx, v233, v792);
                                                if v793 == true {
                                                    let v788 =
                                                        constructor_eq(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 83.
                                                    returns.extend(Some(v788));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v737 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v738 = C::subsume(ctx, v737);
                                    // Rule at src/opts/icmp.isle line 8.
                                    returns.extend(Some(v738));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v224 = C::unpack_value_array_2(ctx, v222);
                            let mut v227 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v224.1, &mut v227);
                            let mut v227 = v227.into_context_iter();
                            while let Some(v228) = v227.next(ctx) {
                                if let &InstructionData::UnaryImm {
                                    opcode: ref v231,
                                    imm: v232,
                                } = &v228.1
                                {
                                    if let &Opcode::Iconst = v231 {
                                        let v233 = C::u64_from_imm64(ctx, v232);
                                        match v233 {
                                            0x0 => {
                                                let v494 = C::fits_in_64(ctx, v2.0);
                                                if let Some(v495) = v494 {
                                                    let v784 = C::ty_int(ctx, v495);
                                                    if let Some(v785) = v784 {
                                                        let v786 =
                                                            constructor_iconst_u(ctx, v785, 0x0);
                                                        let v787 = C::subsume(ctx, v786);
                                                        // Rule at src/opts/icmp.isle line 52.
                                                        returns.extend(Some(v787));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            0x1 => {
                                                let v812 = constructor_iconst_u(ctx, v228.0, 0x0);
                                                let v814 = constructor_eq(ctx, v2.0, v224.0, v812);
                                                // Rule at src/opts/icmp.isle line 141.
                                                returns.extend(Some(v814));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            let v784 = C::ty_int(ctx, v495);
                                            if let Some(v785) = v784 {
                                                let v792 = C::ty_umax(ctx, v228.0);
                                                let v793 = C::u64_eq(ctx, v233, v792);
                                                if v793 == true {
                                                    let v789 =
                                                        constructor_ne(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 68.
                                                    returns.extend(Some(v789));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                if v224.0 == v224.1 {
                                    let v55 = constructor_iconst_u(ctx, v53, 0x0);
                                    let v56 = C::subsume(ctx, v55);
                                    // Rule at src/opts/icmp.isle line 11.
                                    returns.extend(Some(v56));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v494 = C::fits_in_64(ctx, v2.0);
                            if let Some(v495) = v494 {
                                let v784 = C::ty_int(ctx, v495);
                                if let Some(v785) = v784 {
                                    let v224 = C::unpack_value_array_2(ctx, v222);
                                    let mut v227 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v224.1, &mut v227);
                                    let mut v227 = v227.into_context_iter();
                                    while let Some(v228) = v227.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v231,
                                            imm: v232,
                                        } = &v228.1
                                        {
                                            if let &Opcode::Iconst = v231 {
                                                let v233 = C::u64_from_imm64(ctx, v232);
                                                if v233 == 0x0 {
                                                    let v788 =
                                                        constructor_eq(ctx, v785, v224.0, v224.1);
                                                    // Rule at src/opts/icmp.isle line 56.
                                                    returns.extend(Some(v788));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v792 = C::ty_umax(ctx, v228.0);
                                                let v793 = C::u64_eq(ctx, v233, v792);
                                                if v793 == true {
                                                    let v790 = constructor_iconst_u(ctx, v785, 0x1);
                                                    let v791 = C::subsume(ctx, v790);
                                                    // Rule at src/opts/icmp.isle line 73.
                                                    returns.extend(Some(v791));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            let v52 = C::ty_int(ctx, v2.0);
                            if let Some(v53) = v52 {
                                let v224 = C::unpack_value_array_2(ctx, v222);
                                if v224.0 == v224.1 {
                                    let v737 = constructor_iconst_u(ctx, v53, 0x1);
                                    let v738 = C::subsume(ctx, v737);
                                    // Rule at src/opts/icmp.isle line 12.
                                    returns.extend(Some(v738));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                        _ => {}
                    }
                    let v224 = C::unpack_value_array_2(ctx, v222);
                    let mut v561 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v224.0, &mut v561);
                    let mut v561 = v561.into_context_iter();
                    while let Some(v562) = v561.next(ctx) {
                        match &v562.1 {
                            &InstructionData::Unary {
                                opcode: ref v690,
                                arg: v691,
                            } => {
                                if let &Opcode::Sextend = v690 {
                                    let v708 = &C::signed_cond_code(ctx, v223);
                                    if let Some(v709) = v708 {
                                        let mut v698 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v224.1, &mut v698);
                                        let mut v698 = v698.into_context_iter();
                                        while let Some(v699) = v698.next(ctx) {
                                            let v700 = C::iconst_sextend_etor(ctx, v699);
                                            if let Some(v701) = v700 {
                                                if v701.1 == 0x0 {
                                                    let v692 = C::value_type(ctx, v691);
                                                    let v705 = constructor_iconst_s(ctx, v692, 0x0);
                                                    let v710 = constructor_icmp(
                                                        ctx, v692, v223, v691, v705,
                                                    );
                                                    // Rule at src/opts/extends.isle line 44.
                                                    returns.extend(Some(v710));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            &InstructionData::UnaryImm {
                                opcode: ref v565,
                                imm: v566,
                            } => {
                                if let &Opcode::Iconst = v565 {
                                    let mut v227 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v224.1, &mut v227);
                                    let mut v227 = v227.into_context_iter();
                                    while let Some(v228) = v227.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v231,
                                            imm: v232,
                                        } = &v228.1
                                        {
                                            if let &Opcode::Iconst = v231 {
                                                if v228.0 == v562.0 {
                                                    let v567 = C::imm64_icmp(
                                                        ctx, v562.0, v223, v566, v232,
                                                    );
                                                    let v568 = constructor_iconst(ctx, v2.0, v567);
                                                    let v569 = C::subsume(ctx, v568);
                                                    // Rule at src/opts/cprop.isle line 83.
                                                    returns.extend(Some(v569));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    let v577 = &C::intcc_swap_args(ctx, v223);
                                    let v578 = constructor_icmp(ctx, v2.0, v577, v224.1, v224.0);
                                    // Rule at src/opts/cprop.isle line 117.
                                    returns.extend(Some(v578));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v84,
                args: ref v85,
            } => {
                match v84 {
                    &Opcode::Select => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            match &v91.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v827,
                                    args: ref v828,
                                    cond: ref v829,
                                } => {
                                    if let &Opcode::Icmp = v827 {
                                        match v829 {
                                            &IntCC::Equal => {
                                                let mut v836 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v836);
                                                let mut v836 = v836.into_context_iter();
                                                while let Some(v837) = v836.next(ctx) {
                                                    if let &InstructionData::Ternary {
                                                        opcode: ref v899,
                                                        args: ref v900,
                                                    } = &v837.1
                                                    {
                                                        if let &Opcode::Select = v899 {
                                                            if v2.0 == v837.0 {
                                                                let mut v848 = C::inst_data_tupled_etor_returns::default();
                                                                C::inst_data_tupled_etor(
                                                                    ctx, v86.1, &mut v848,
                                                                );
                                                                let mut v848 =
                                                                    v848.into_context_iter();
                                                                while let Some(v849) =
                                                                    v848.next(ctx)
                                                                {
                                                                    let v850 =
                                                                        C::iconst_sextend_etor(
                                                                            ctx, v849,
                                                                        );
                                                                    if let Some(v851) = v850 {
                                                                        if v851.1 == 0x0 {
                                                                            if v2.0 == v851.0 {
                                                                                let v901 = C::unpack_value_array_3(ctx, v900);
                                                                                let mut v905 = C::inst_data_etor_returns::default();
                                                                                C::inst_data_etor(
                                                                                    ctx, v901.0,
                                                                                    &mut v905,
                                                                                );
                                                                                let mut v905 = v905.into_context_iter();
                                                                                while let Some(
                                                                                    v906,
                                                                                ) =
                                                                                    v905.next(ctx)
                                                                                {
                                                                                    if let &InstructionData::IntCompare {
                                                                                        opcode: ref v909,
                                                                                        args: ref v910,
                                                                                        cond: ref v911,
                                                                                    } = &v906.1 {
                                                                                        if let &Opcode::Icmp = v909 {
                                                                                            match v911 {
                                                                                                &IntCC::SignedGreaterThan => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == 0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == -0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 104.
                                                                                                                                                returns.extend(Some(v940));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == 0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == -0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 111.
                                                                                                                                                returns.extend(Some(v940));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThan => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == -0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == 0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 90.
                                                                                                                                                returns.extend(Some(v940));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::SignedLessThanOrEqual => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == -0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == 0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 97.
                                                                                                                                                returns.extend(Some(v940));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThan => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == 0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == -0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 39.
                                                                                                                                                returns.extend(Some(v898));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedGreaterThanOrEqual => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == 0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == -0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 46.
                                                                                                                                                returns.extend(Some(v898));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThan => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == -0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == 0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 25.
                                                                                                                                                returns.extend(Some(v898));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                &IntCC::UnsignedLessThanOrEqual => {
                                                                                                    if v91.0 == v906.0 {
                                                                                                        let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                        let v912 = C::unpack_value_array_2(ctx, v910);
                                                                                                        if v830.0 == v912.0 {
                                                                                                            if v830.1 == v912.1 {
                                                                                                                let mut v915 = C::inst_data_tupled_etor_returns::default();
                                                                                                                C::inst_data_tupled_etor(ctx, v901.1, &mut v915);
                                                                                                                let mut v915 = v915.into_context_iter();
                                                                                                                while let Some(v916) = v915.next(ctx) {
                                                                                                                    let v917 = C::iconst_sextend_etor(ctx, v916);
                                                                                                                    if let Some(v918) = v917 {
                                                                                                                        if v918.1 == -0x1 {
                                                                                                                            if v2.0 == v918.0 {
                                                                                                                                let mut v921 = C::inst_data_tupled_etor_returns::default();
                                                                                                                                C::inst_data_tupled_etor(ctx, v901.2, &mut v921);
                                                                                                                                let mut v921 = v921.into_context_iter();
                                                                                                                                while let Some(v922) = v921.next(ctx) {
                                                                                                                                    let v923 = C::iconst_sextend_etor(ctx, v922);
                                                                                                                                    if let Some(v924) = v923 {
                                                                                                                                        if v924.1 == 0x1 {
                                                                                                                                            if v2.0 == v924.0 {
                                                                                                                                                let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                                                let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                                                // Rule at src/opts/spaceship.isle line 32.
                                                                                                                                                returns.extend(Some(v898));
                                                                                                                                                if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                                _ => {}
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThan => {
                                                let mut v836 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v836);
                                                let mut v836 = v836.into_context_iter();
                                                while let Some(v837) = v836.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v927,
                                                        arg: v928,
                                                    } = &v837.1
                                                    {
                                                        match v927 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v837.0 {
                                                                    let mut v848 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v848,
                                                                    );
                                                                    let mut v848 =
                                                                        v848.into_context_iter();
                                                                    while let Some(v849) =
                                                                        v848.next(ctx)
                                                                    {
                                                                        let v850 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v849,
                                                                            );
                                                                        if let Some(v851) = v850 {
                                                                            if v851.1 == 0x1 {
                                                                                if v2.0 == v851.0 {
                                                                                    let mut v929 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928, &mut v929);
                                                                                    let mut v929 = v929.into_context_iter();
                                                                                    while let Some(
                                                                                        v930,
                                                                                    ) = v929
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v933,
                                                                                            args: ref v934,
                                                                                            cond: ref v935,
                                                                                        } = &v930.1 {
                                                                                            if let &Opcode::Icmp = v933 {
                                                                                                match v935 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                    // Rule at src/opts/spaceship.isle line 130.
                                                                                                                    returns.extend(Some(v940));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                    // Rule at src/opts/spaceship.isle line 120.
                                                                                                                    returns.extend(Some(v940));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v837.0 {
                                                                    let mut v848 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v848,
                                                                    );
                                                                    let mut v848 =
                                                                        v848.into_context_iter();
                                                                    while let Some(v849) =
                                                                        v848.next(ctx)
                                                                    {
                                                                        let v850 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v849,
                                                                            );
                                                                        if let Some(v851) = v850 {
                                                                            if v851.1 == 0x1 {
                                                                                if v2.0 == v851.0 {
                                                                                    let mut v929 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928, &mut v929);
                                                                                    let mut v929 = v929.into_context_iter();
                                                                                    while let Some(
                                                                                        v930,
                                                                                    ) = v929
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v933,
                                                                                            args: ref v934,
                                                                                            cond: ref v935,
                                                                                        } = &v930.1 {
                                                                                            if let &Opcode::Icmp = v933 {
                                                                                                match v935 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                    // Rule at src/opts/spaceship.isle line 134.
                                                                                                                    returns.extend(Some(v940));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::SignedLessThan => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                                    // Rule at src/opts/spaceship.isle line 124.
                                                                                                                    returns.extend(Some(v940));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 26.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.2 == v830.0 {
                                                    if v86.1 == v830.1 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 40.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 27.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 41.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let mut v848 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v848);
                                                let mut v848 = v848.into_context_iter();
                                                while let Some(v849) = v848.next(ctx) {
                                                    let v850 = C::iconst_sextend_etor(ctx, v849);
                                                    if let Some(v851) = v850 {
                                                        if v851.1 == -0x1 {
                                                            if v2.0 == v851.0 {
                                                                let mut v883 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(
                                                                    ctx, v86.2, &mut v883,
                                                                );
                                                                let mut v883 =
                                                                    v883.into_context_iter();
                                                                while let Some(v884) =
                                                                    v883.next(ctx)
                                                                {
                                                                    if v2.0 == v884.0 {
                                                                        let mut v887 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v884.1, &mut v887,
                                                                        );
                                                                        let mut v887 = v887
                                                                            .into_context_iter();
                                                                        while let Some(v888) =
                                                                            v887.next(ctx)
                                                                        {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v891,
                                                                                args: ref v892,
                                                                                cond: ref v893,
                                                                            } = &v888.1 {
                                                                                if let &Opcode::Icmp = v891 {
                                                                                    match v893 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v888.0 {
                                                                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                let v894 = C::unpack_value_array_2(ctx, v892);
                                                                                                if v830.0 == v894.0 {
                                                                                                    if v830.1 == v894.1 {
                                                                                                        let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                        let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                        // Rule at src/opts/spaceship.isle line 78.
                                                                                                        returns.extend(Some(v940));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::SignedGreaterThan => {
                                                                                            if v91.0 == v888.0 {
                                                                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                let v894 = C::unpack_value_array_2(ctx, v892);
                                                                                                if v830.0 == v894.0 {
                                                                                                    if v830.1 == v894.1 {
                                                                                                        let v939 = constructor_spaceship_s(ctx, v91.0, v830.0, v830.1);
                                                                                                        let v940 = constructor_sextend_maybe(ctx, v2.0, v939);
                                                                                                        // Rule at src/opts/spaceship.isle line 84.
                                                                                                        returns.extend(Some(v940));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 30.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 36.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 31.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 37.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let mut v836 = C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v86.2, &mut v836);
                                                let mut v836 = v836.into_context_iter();
                                                while let Some(v837) = v836.next(ctx) {
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v927,
                                                        arg: v928,
                                                    } = &v837.1
                                                    {
                                                        match v927 {
                                                            &Opcode::Ineg => {
                                                                if v91.0 == v837.0 {
                                                                    let mut v848 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v848,
                                                                    );
                                                                    let mut v848 =
                                                                        v848.into_context_iter();
                                                                    while let Some(v849) =
                                                                        v848.next(ctx)
                                                                    {
                                                                        let v850 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v849,
                                                                            );
                                                                        if let Some(v851) = v850 {
                                                                            if v851.1 == 0x1 {
                                                                                if v2.0 == v851.0 {
                                                                                    let mut v929 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928, &mut v929);
                                                                                    let mut v929 = v929.into_context_iter();
                                                                                    while let Some(
                                                                                        v930,
                                                                                    ) = v929
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v933,
                                                                                            args: ref v934,
                                                                                            cond: ref v935,
                                                                                        } = &v930.1 {
                                                                                            if let &Opcode::Icmp = v933 {
                                                                                                match v935 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                    // Rule at src/opts/spaceship.isle line 65.
                                                                                                                    returns.extend(Some(v898));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                    // Rule at src/opts/spaceship.isle line 55.
                                                                                                                    returns.extend(Some(v898));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            &Opcode::Bmask => {
                                                                if v2.0 == v837.0 {
                                                                    let mut v848 = C::inst_data_tupled_etor_returns::default();
                                                                    C::inst_data_tupled_etor(
                                                                        ctx, v86.1, &mut v848,
                                                                    );
                                                                    let mut v848 =
                                                                        v848.into_context_iter();
                                                                    while let Some(v849) =
                                                                        v848.next(ctx)
                                                                    {
                                                                        let v850 =
                                                                            C::iconst_sextend_etor(
                                                                                ctx, v849,
                                                                            );
                                                                        if let Some(v851) = v850 {
                                                                            if v851.1 == 0x1 {
                                                                                if v2.0 == v851.0 {
                                                                                    let mut v929 = C::inst_data_etor_returns::default();
                                                                                    C::inst_data_etor(ctx, v928, &mut v929);
                                                                                    let mut v929 = v929.into_context_iter();
                                                                                    while let Some(
                                                                                        v930,
                                                                                    ) = v929
                                                                                        .next(ctx)
                                                                                    {
                                                                                        if let &InstructionData::IntCompare {
                                                                                            opcode: ref v933,
                                                                                            args: ref v934,
                                                                                            cond: ref v935,
                                                                                        } = &v930.1 {
                                                                                            if let &Opcode::Icmp = v933 {
                                                                                                match v935 {
                                                                                                    &IntCC::NotEqual => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                    // Rule at src/opts/spaceship.isle line 69.
                                                                                                                    returns.extend(Some(v898));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    &IntCC::UnsignedLessThan => {
                                                                                                        if v91.0 == v930.0 {
                                                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                            let v936 = C::unpack_value_array_2(ctx, v934);
                                                                                                            if v830.0 == v936.0 {
                                                                                                                if v830.1 == v936.1 {
                                                                                                                    let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                                    let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                                    // Rule at src/opts/spaceship.isle line 59.
                                                                                                                    returns.extend(Some(v898));
                                                                                                                    if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                    _ => {}
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 28.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.2 == v830.0 {
                                                    if v86.1 == v830.1 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 42.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 29.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 43.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let mut v848 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v86.1, &mut v848);
                                                let mut v848 = v848.into_context_iter();
                                                while let Some(v849) = v848.next(ctx) {
                                                    let v850 = C::iconst_sextend_etor(ctx, v849);
                                                    if let Some(v851) = v850 {
                                                        if v851.1 == -0x1 {
                                                            if v2.0 == v851.0 {
                                                                let mut v883 = C::uextend_maybe_etor_returns::default();
                                                                C::uextend_maybe_etor(
                                                                    ctx, v86.2, &mut v883,
                                                                );
                                                                let mut v883 =
                                                                    v883.into_context_iter();
                                                                while let Some(v884) =
                                                                    v883.next(ctx)
                                                                {
                                                                    if v2.0 == v884.0 {
                                                                        let mut v887 = C::inst_data_etor_returns::default();
                                                                        C::inst_data_etor(
                                                                            ctx, v884.1, &mut v887,
                                                                        );
                                                                        let mut v887 = v887
                                                                            .into_context_iter();
                                                                        while let Some(v888) =
                                                                            v887.next(ctx)
                                                                        {
                                                                            if let &InstructionData::IntCompare {
                                                                                opcode: ref v891,
                                                                                args: ref v892,
                                                                                cond: ref v893,
                                                                            } = &v888.1 {
                                                                                if let &Opcode::Icmp = v891 {
                                                                                    match v893 {
                                                                                        &IntCC::NotEqual => {
                                                                                            if v91.0 == v888.0 {
                                                                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                let v894 = C::unpack_value_array_2(ctx, v892);
                                                                                                if v830.0 == v894.0 {
                                                                                                    if v830.1 == v894.1 {
                                                                                                        let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                        let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                        // Rule at src/opts/spaceship.isle line 13.
                                                                                                        returns.extend(Some(v898));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        &IntCC::UnsignedGreaterThan => {
                                                                                            if v91.0 == v888.0 {
                                                                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                                                                let v894 = C::unpack_value_array_2(ctx, v892);
                                                                                                if v830.0 == v894.0 {
                                                                                                    if v830.1 == v894.1 {
                                                                                                        let v897 = constructor_spaceship_u(ctx, v91.0, v830.0, v830.1);
                                                                                                        let v898 = constructor_sextend_maybe(ctx, v2.0, v897);
                                                                                                        // Rule at src/opts/spaceship.isle line 19.
                                                                                                        returns.extend(Some(v898));
                                                                                                        if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        _ => {}
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 32.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 38.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 33.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 39.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::UnaryImm {
                                                opcode: ref v833,
                                                imm: v834,
                                            } = &v97.1
                                            {
                                                if let &Opcode::Iconst = v833 {
                                                    let v835 = C::u64_from_imm64(ctx, v834);
                                                    match v835 {
                                                        0x0 => {
                                                            let mut v836 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v86.2, &mut v836,
                                                            );
                                                            let mut v836 = v836.into_context_iter();
                                                            while let Some(v837) = v836.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v840,
                                                                    imm: v841,
                                                                } = &v837.1 {
                                                                    if let &Opcode::Iconst = v840 {
                                                                        let v842 = C::u64_from_imm64(ctx, v841);
                                                                        let v843 = C::u64_is_zero(ctx, v842);
                                                                        if v843 == false {
                                                                            let v844 = &C::intcc_complement(ctx, v829);
                                                                            let v830 = C::unpack_value_array_2(ctx, v828);
                                                                            let v845 = constructor_icmp(ctx, v91.0, v844, v830.0, v830.1);
                                                                            let v846 = constructor_select(ctx, v2.0, v845, v86.2, v86.1);
                                                                            // Rule at src/opts/selects.isle line 9.
                                                                            returns.extend(Some(v846));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        0x1 => {
                                                            let mut v836 =
                                                                C::inst_data_etor_returns::default(
                                                                );
                                                            C::inst_data_etor(
                                                                ctx, v86.2, &mut v836,
                                                            );
                                                            let mut v836 = v836.into_context_iter();
                                                            while let Some(v837) = v836.next(ctx) {
                                                                if let &InstructionData::UnaryImm {
                                                                    opcode: ref v840,
                                                                    imm: v841,
                                                                } = &v837.1 {
                                                                    if let &Opcode::Iconst = v840 {
                                                                        let v842 = C::u64_from_imm64(ctx, v841);
                                                                        if v842 == 0x0 {
                                                                            let v847 = constructor_uextend_maybe(ctx, v2.0, v86.0);
                                                                            // Rule at src/opts/selects.isle line 15.
                                                                            returns.extend(Some(v847));
                                                                            if returns.len() >= MAX_ISLE_RETURNS { return; }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        _ => {}
                                                    }
                                                }
                                            }
                                        }
                                        let mut v848 = C::inst_data_tupled_etor_returns::default();
                                        C::inst_data_tupled_etor(ctx, v86.1, &mut v848);
                                        let mut v848 = v848.into_context_iter();
                                        while let Some(v849) = v848.next(ctx) {
                                            let v850 = C::iconst_sextend_etor(ctx, v849);
                                            if let Some(v851) = v850 {
                                                if v851.1 == -0x1 {
                                                    let mut v854 =
                                                        C::inst_data_tupled_etor_returns::default();
                                                    C::inst_data_tupled_etor(ctx, v86.2, &mut v854);
                                                    let mut v854 = v854.into_context_iter();
                                                    while let Some(v855) = v854.next(ctx) {
                                                        let v856 =
                                                            C::iconst_sextend_etor(ctx, v855);
                                                        if let Some(v857) = v856 {
                                                            if v857.1 == 0x0 {
                                                                let v860 = constructor_bmask(
                                                                    ctx, v2.0, v86.0,
                                                                );
                                                                // Rule at src/opts/selects.isle line 20.
                                                                returns.extend(Some(v860));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v94,
                                    arg: v95,
                                } => {
                                    if let &Opcode::Uextend = v94 {
                                        let mut v757 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v95, &mut v757);
                                        let mut v757 = v757.into_context_iter();
                                        while let Some(v758) = v757.next(ctx) {
                                            if let &InstructionData::IntCompare {
                                                opcode: ref v761,
                                                args: ref v762,
                                                cond: ref v763,
                                            } = &v758.1
                                            {
                                                if let &Opcode::Icmp = v761 {
                                                    let v767 = constructor_select(
                                                        ctx, v2.0, v95, v86.1, v86.2,
                                                    );
                                                    // Rule at src/opts/icmp.isle line 29.
                                                    returns.extend(Some(v767));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                    // Rule at src/opts/icmp.isle line 32.
                                                    returns.extend(Some(v767));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v609,
                                    imm: v610,
                                } => {
                                    if let &Opcode::Iconst = v609 {
                                        let v611 = C::u64_from_imm64(ctx, v610);
                                        if v611 == 0x0 {
                                            let v614 = C::subsume(ctx, v86.2);
                                            // Rule at src/opts/cprop.isle line 172.
                                            returns.extend(Some(v614));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        let v612 = C::u64_is_zero(ctx, v611);
                                        if v612 == false {
                                            let v613 = C::subsume(ctx, v86.1);
                                            // Rule at src/opts/cprop.isle line 170.
                                            returns.extend(Some(v613));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        if v86.1 == v86.2 {
                            // Rule at src/opts/selects.isle line 4.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                        let mut v218 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v86.0, &mut v218);
                        let mut v218 = v218.into_context_iter();
                        while let Some(v219) = v218.next(ctx) {
                            let v220 = constructor_select(ctx, v2.0, v219, v86.1, v86.2);
                            // Rule at src/opts/bitops.isle line 118.
                            returns.extend(Some(v220));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Bitselect => {
                        let v865 = C::multi_lane(ctx, v2.0);
                        if let Some(v866) = v865 {
                            let v86 = C::unpack_value_array_3(ctx, v85);
                            let mut v90 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v86.0, &mut v90);
                            let mut v90 = v90.into_context_iter();
                            while let Some(v91) = v90.next(ctx) {
                                if let &InstructionData::IntCompare {
                                    opcode: ref v827,
                                    args: ref v828,
                                    cond: ref v829,
                                } = &v91.1
                                {
                                    if let &Opcode::Icmp = v827 {
                                        match v829 {
                                            &IntCC::SignedGreaterThan => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 46.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 60.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedGreaterThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 47.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 61.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThan => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 50.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 56.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::SignedLessThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v863 = constructor_smin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 51.
                                                        returns.extend(Some(v863));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v861 = constructor_smax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 57.
                                                        returns.extend(Some(v861));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThan => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 48.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 62.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedGreaterThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 49.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 63.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThan => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 52.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 58.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            &IntCC::UnsignedLessThanOrEqual => {
                                                let v830 = C::unpack_value_array_2(ctx, v828);
                                                if v86.1 == v830.0 {
                                                    if v86.2 == v830.1 {
                                                        let v864 = constructor_umin(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 53.
                                                        returns.extend(Some(v864));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                                if v86.1 == v830.1 {
                                                    if v86.2 == v830.0 {
                                                        let v862 = constructor_umax(
                                                            ctx, v2.0, v830.0, v830.1,
                                                        );
                                                        // Rule at src/opts/selects.isle line 59.
                                                        returns.extend(Some(v862));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                            }
                        }
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        if v86.1 == v86.2 {
                            // Rule at src/opts/selects.isle line 5.
                            returns.extend(Some(v86.1));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Fma => {
                        let v86 = C::unpack_value_array_3(ctx, v85);
                        let mut v90 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v86.0, &mut v90);
                        let mut v90 = v90.into_context_iter();
                        while let Some(v91) = v90.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v94,
                                arg: v95,
                            } = &v91.1
                            {
                                if let &Opcode::Fneg = v94 {
                                    if v2.0 == v91.0 {
                                        let mut v96 = C::inst_data_etor_returns::default();
                                        C::inst_data_etor(ctx, v86.1, &mut v96);
                                        let mut v96 = v96.into_context_iter();
                                        while let Some(v97) = v96.next(ctx) {
                                            if let &InstructionData::Unary {
                                                opcode: ref v100,
                                                arg: v101,
                                            } = &v97.1
                                            {
                                                if let &Opcode::Fneg = v100 {
                                                    if v2.0 == v97.0 {
                                                        let v102 = constructor_fma(
                                                            ctx, v2.0, v95, v101, v86.2,
                                                        );
                                                        // Rule at src/opts/arithmetic.isle line 109.
                                                        returns.extend(Some(v102));
                                                        if returns.len() >= MAX_ISLE_RETURNS {
                                                            return;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::Unary {
                opcode: ref v32,
                arg: v33,
            } => {
                match v32 {
                    &Opcode::Splat => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::UnaryIeee32 {
                                    opcode: ref v637,
                                    imm: v638,
                                } => {
                                    if let &Opcode::F32const = v637 {
                                        let v639 = C::u32_from_ieee32(ctx, v638);
                                        let v640 = C::u32_as_u64(ctx, v639);
                                        let v641 = constructor_splat32(ctx, v640);
                                        let v642 = constructor_vconst(ctx, v2.0, v641);
                                        // Rule at src/opts/cprop.isle line 197.
                                        returns.extend(Some(v642));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryIeee64 {
                                    opcode: ref v643,
                                    imm: v644,
                                } => {
                                    if let &Opcode::F64const = v643 {
                                        let v645 = C::u64_from_ieee64(ctx, v644);
                                        let v646 = C::splat64(ctx, v645);
                                        let v647 = constructor_vconst(ctx, v2.0, v646);
                                        // Rule at src/opts/cprop.isle line 199.
                                        returns.extend(Some(v647));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v530,
                                    imm: v531,
                                } => {
                                    if let &Opcode::Iconst = v530 {
                                        match v35.0 {
                                            I8 => {
                                                let v622 = C::u64_uextend_imm64(ctx, I8, v531);
                                                let v623 = constructor_splat8(ctx, v622);
                                                let v624 = constructor_vconst(ctx, v2.0, v623);
                                                // Rule at src/opts/cprop.isle line 189.
                                                returns.extend(Some(v624));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I16 => {
                                                let v626 = C::u64_uextend_imm64(ctx, I16, v531);
                                                let v627 = constructor_splat16(ctx, v626);
                                                let v628 = constructor_vconst(ctx, v2.0, v627);
                                                // Rule at src/opts/cprop.isle line 191.
                                                returns.extend(Some(v628));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I32 => {
                                                let v630 = C::u64_uextend_imm64(ctx, I32, v531);
                                                let v631 = constructor_splat32(ctx, v630);
                                                let v632 = constructor_vconst(ctx, v2.0, v631);
                                                // Rule at src/opts/cprop.isle line 193.
                                                returns.extend(Some(v632));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            I64 => {
                                                let v634 = C::u64_uextend_imm64(ctx, I64, v531);
                                                let v635 = C::splat64(ctx, v634);
                                                let v636 = constructor_vconst(ctx, v2.0, v635);
                                                // Rule at src/opts/cprop.isle line 195.
                                                returns.extend(Some(v636));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Ineg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v43 = constructor_isub(ctx, v2.0, v40.1, v40.0);
                                                // Rule at src/opts/arithmetic.isle line 28.
                                                returns.extend(Some(v43));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Ushr => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v1001 =
                                                    C::inst_data_etor_returns::default();
                                                C::inst_data_etor(ctx, v40.1, &mut v1001);
                                                let mut v1001 = v1001.into_context_iter();
                                                while let Some(v1002) = v1001.next(ctx) {
                                                    if let &InstructionData::UnaryImm {
                                                        opcode: ref v1005,
                                                        imm: v1006,
                                                    } = &v1002.1
                                                    {
                                                        if let &Opcode::Iconst = v1005 {
                                                            let v1007 =
                                                                C::u64_from_imm64(ctx, v1006);
                                                            let v203 = constructor_ty_shift_mask(
                                                                ctx, v2.0,
                                                            );
                                                            let v1008 = C::u64_eq(ctx, v1007, v203);
                                                            if v1008 == true {
                                                                if v2.0 == v1002.0 {
                                                                    let v1009 = constructor_sshr(
                                                                        ctx, v2.0, v40.0, v40.1,
                                                                    );
                                                                    // Rule at src/opts/shifts.isle line 99.
                                                                    returns.extend(Some(v1009));
                                                                    if returns.len()
                                                                        >= MAX_ISLE_RETURNS
                                                                    {
                                                                        return;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            if v2.0 == v35.0 {
                                                let v1025 = C::lane_type(ctx, v2.0);
                                                let v1082 = constructor_ineg(ctx, v1025, v46);
                                                let v1083 = constructor_splat(ctx, v2.0, v1082);
                                                // Rule at src/opts/vector.isle line 46.
                                                returns.extend(Some(v1083));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Ineg => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/arithmetic.isle line 35.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Iabs => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                match v45 {
                                    &Opcode::Splat => {
                                        if v2.0 == v35.0 {
                                            let v1025 = C::lane_type(ctx, v2.0);
                                            let v1084 = constructor_iabs(ctx, v1025, v46);
                                            let v1085 = constructor_splat(ctx, v2.0, v1084);
                                            // Rule at src/opts/vector.isle line 49.
                                            returns.extend(Some(v1085));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Ineg => {
                                        if v2.0 == v35.0 {
                                            let v50 = constructor_iabs(ctx, v2.0, v46);
                                            // Rule at src/opts/arithmetic.isle line 42.
                                            returns.extend(Some(v50));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    &Opcode::Iabs => {
                                        if v2.0 == v35.0 {
                                            let v51 = C::subsume(ctx, v33);
                                            // Rule at src/opts/arithmetic.isle line 46.
                                            returns.extend(Some(v51));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    &Opcode::Bnot => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == -0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(
                                                                    ctx, v2.0, v40.0,
                                                                );
                                                                // Rule at src/opts/arithmetic.isle line 75.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Isub => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let mut v66 =
                                                    C::inst_data_tupled_etor_returns::default();
                                                C::inst_data_tupled_etor(ctx, v40.1, &mut v66);
                                                let mut v66 = v66.into_context_iter();
                                                while let Some(v67) = v66.next(ctx) {
                                                    let v68 = C::iconst_sextend_etor(ctx, v67);
                                                    if let Some(v69) = v68 {
                                                        if v69.1 == 0x1 {
                                                            if v2.0 == v69.0 {
                                                                let v72 = constructor_ineg(
                                                                    ctx, v2.0, v40.0,
                                                                );
                                                                // Rule at src/opts/arithmetic.isle line 73.
                                                                returns.extend(Some(v72));
                                                                if returns.len() >= MAX_ISLE_RETURNS
                                                                {
                                                                    return;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v188 = constructor_bnot(ctx, v2.0, v40.0);
                                            let v189 = constructor_bnot(ctx, v2.0, v40.1);
                                            let v191 = constructor_bor(ctx, v2.0, v188, v189);
                                            // Rule at src/opts/bitops.isle line 46.
                                            returns.extend(Some(v191));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bor => {
                                            if v2.0 == v35.0 {
                                                let v40 = C::unpack_value_array_2(ctx, v39);
                                                let v188 = constructor_bnot(ctx, v2.0, v40.0);
                                                let v189 = constructor_bnot(ctx, v2.0, v40.1);
                                                let v190 = constructor_band(ctx, v2.0, v188, v189);
                                                // Rule at src/opts/bitops.isle line 43.
                                                returns.extend(Some(v190));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1062 = C::ty_vector_not_float(ctx, v2.0);
                                            if let Some(v1063) = v1062 {
                                                if v2.0 == v35.0 {
                                                    let v1025 = C::lane_type(ctx, v2.0);
                                                    let v1070 = constructor_bnot(ctx, v1025, v46);
                                                    let v1071 = constructor_splat(ctx, v2.0, v1070);
                                                    // Rule at src/opts/vector.isle line 27.
                                                    returns.extend(Some(v1071));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            if v2.0 == v35.0 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/bitops.isle line 39.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v530,
                                    imm: v531,
                                } => {
                                    if let &Opcode::Iconst = v530 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            if v35.0 == v495 {
                                                let v532 = C::u64_from_imm64(ctx, v531);
                                                let v533 = C::u64_not(ctx, v532);
                                                let v534 = C::imm64_masked(ctx, v495, v533);
                                                let v535 = constructor_iconst(ctx, v495, v534);
                                                let v536 = C::subsume(ctx, v535);
                                                // Rule at src/opts/cprop.isle line 53.
                                                returns.extend(Some(v536));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v820 = C::remat(ctx, arg0);
                        // Rule at src/opts/remat.isle line 24.
                        returns.extend(Some(v820));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Bitrev = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/bitops.isle line 137.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bswap => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Bswap = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/bitops.isle line 134.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Popcnt => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    if v2.0 == v35.0 {
                                        let v1025 = C::lane_type(ctx, v2.0);
                                        let v1086 = constructor_popcnt(ctx, v1025, v46);
                                        let v1087 = constructor_splat(ctx, v2.0, v1086);
                                        // Rule at src/opts/vector.isle line 52.
                                        returns.extend(Some(v1087));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Fneg => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Fneg = v45 {
                                    if v2.0 == v35.0 {
                                        let v47 = C::subsume(ctx, v46);
                                        // Rule at src/opts/arithmetic.isle line 105.
                                        returns.extend(Some(v47));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Bmask => {
                        if v2.0 == I8 {
                            let mut v34 = C::inst_data_etor_returns::default();
                            C::inst_data_etor(ctx, v33, &mut v34);
                            let mut v34 = v34.into_context_iter();
                            while let Some(v35) = v34.next(ctx) {
                                if v35.0 == I8 {
                                    if let &InstructionData::IntCompare {
                                        opcode: ref v207,
                                        args: ref v208,
                                        cond: ref v209,
                                    } = &v35.1
                                    {
                                        if let &Opcode::Icmp = v207 {
                                            let v214 = constructor_ineg(ctx, I8, v33);
                                            // Rule at src/opts/bitops.isle line 95.
                                            returns.extend(Some(v214));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let mut v215 = ContextIterWrapper::<ConstructorVec<_>, _>::default();
                        constructor_truthy(ctx, v33, &mut v215);
                        let mut v215 = v215.into_context_iter();
                        while let Some(v216) = v215.next(ctx) {
                            let v217 = constructor_bmask(ctx, v2.0, v216);
                            // Rule at src/opts/bitops.isle line 117.
                            returns.extend(Some(v217));
                            if returns.len() >= MAX_ISLE_RETURNS {
                                return;
                            }
                        }
                    }
                    &Opcode::Ireduce => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Binary {
                                    opcode: ref v38,
                                    args: ref v39,
                                } => {
                                    match v38 {
                                        &Opcode::Iadd => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v731 = constructor_iadd(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 86.
                                            returns.extend(Some(v731));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Isub => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v732 = constructor_isub(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 87.
                                            returns.extend(Some(v732));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Imul => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v733 = constructor_imul(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 88.
                                            returns.extend(Some(v733));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Band => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v736 = constructor_band(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 91.
                                            returns.extend(Some(v736));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v734 = constructor_bor(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 89.
                                            returns.extend(Some(v734));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bxor => {
                                            let v40 = C::unpack_value_array_2(ctx, v39);
                                            let v729 = constructor_ireduce(ctx, v2.0, v40.0);
                                            let v730 = constructor_ireduce(ctx, v2.0, v40.1);
                                            let v735 = constructor_bxor(ctx, v2.0, v729, v730);
                                            // Rule at src/opts/extends.isle line 90.
                                            returns.extend(Some(v735));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Ineg => {
                                            let v726 = constructor_ireduce(ctx, v2.0, v46);
                                            let v727 = constructor_ineg(ctx, v2.0, v726);
                                            // Rule at src/opts/extends.isle line 83.
                                            returns.extend(Some(v727));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bnot => {
                                            let v726 = constructor_ireduce(ctx, v2.0, v46);
                                            let v728 = constructor_bnot(ctx, v2.0, v726);
                                            // Rule at src/opts/extends.isle line 84.
                                            returns.extend(Some(v728));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Bmask => {
                                            let v241 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src/opts/bitops.isle line 131.
                                            returns.extend(Some(v241));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v712 = C::ty_bits_u64(ctx, v53);
                                                let v711 = C::value_type(ctx, v46);
                                                let v713 = C::ty_bits_u64(ctx, v711);
                                                let v714 = C::u64_lt(ctx, v712, v713);
                                                if v714 == true {
                                                    let v715 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 58.
                                                    returns.extend(Some(v715));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v716 = C::u64_lt(ctx, v713, v712);
                                                if v716 == true {
                                                    let v718 = constructor_uextend(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 65.
                                                    returns.extend(Some(v718));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let v711 = C::value_type(ctx, v46);
                                            if v2.0 == v711 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/extends.isle line 51.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v52 = C::ty_int(ctx, v2.0);
                                            if let Some(v53) = v52 {
                                                let v712 = C::ty_bits_u64(ctx, v53);
                                                let v711 = C::value_type(ctx, v46);
                                                let v713 = C::ty_bits_u64(ctx, v711);
                                                let v714 = C::u64_lt(ctx, v712, v713);
                                                if v714 == true {
                                                    let v715 = constructor_ireduce(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 55.
                                                    returns.extend(Some(v715));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                                let v716 = C::u64_lt(ctx, v713, v712);
                                                if v716 == true {
                                                    let v717 = constructor_sextend(ctx, v53, v46);
                                                    // Rule at src/opts/extends.isle line 62.
                                                    returns.extend(Some(v717));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                            let v711 = C::value_type(ctx, v46);
                                            if v2.0 == v711 {
                                                let v47 = C::subsume(ctx, v46);
                                                // Rule at src/opts/extends.isle line 50.
                                                returns.extend(Some(v47));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v530,
                                    imm: v531,
                                } => {
                                    if let &Opcode::Iconst = v530 {
                                        let v546 = C::fits_in_64(ctx, v35.0);
                                        if let Some(v547) = v546 {
                                            let v532 = C::u64_from_imm64(ctx, v531);
                                            let v548 = C::imm64_masked(ctx, v2.0, v532);
                                            let v549 = constructor_iconst(ctx, v2.0, v548);
                                            let v550 = C::subsume(ctx, v549);
                                            // Rule at src/opts/cprop.isle line 73.
                                            returns.extend(Some(v550));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::SwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1025 = C::lane_type(ctx, v2.0);
                                    let v1106 = constructor_sextend(ctx, v1025, v46);
                                    let v1107 = constructor_splat(ctx, v2.0, v1106);
                                    // Rule at src/opts/vector.isle line 86.
                                    returns.extend(Some(v1107));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::SwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1025 = C::lane_type(ctx, v2.0);
                                    let v1106 = constructor_sextend(ctx, v1025, v46);
                                    let v1107 = constructor_splat(ctx, v2.0, v1106);
                                    // Rule at src/opts/vector.isle line 85.
                                    returns.extend(Some(v1107));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenLow => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1025 = C::lane_type(ctx, v2.0);
                                    let v1108 = constructor_uextend(ctx, v1025, v46);
                                    let v1109 = constructor_splat(ctx, v2.0, v1108);
                                    // Rule at src/opts/vector.isle line 89.
                                    returns.extend(Some(v1109));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::UwidenHigh => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                if let &Opcode::Splat = v45 {
                                    let v1025 = C::lane_type(ctx, v2.0);
                                    let v1108 = constructor_uextend(ctx, v1025, v46);
                                    let v1109 = constructor_splat(ctx, v2.0, v1108);
                                    // Rule at src/opts/vector.isle line 88.
                                    returns.extend(Some(v1109));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::Uextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    if let &Opcode::Uextend = v45 {
                                        let v681 = constructor_uextend(ctx, v2.0, v46);
                                        // Rule at src/opts/extends.isle line 2.
                                        returns.extend(Some(v681));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v530,
                                    imm: v531,
                                } => {
                                    if let &Opcode::Iconst = v530 {
                                        let v494 = C::fits_in_64(ctx, v2.0);
                                        if let Some(v495) = v494 {
                                            let v532 = C::u64_from_imm64(ctx, v531);
                                            let v551 = constructor_iconst_u(ctx, v495, v532);
                                            let v552 = C::subsume(ctx, v551);
                                            // Rule at src/opts/cprop.isle line 78.
                                            returns.extend(Some(v552));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::Sextend => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::IntCompare {
                                    opcode: ref v207,
                                    args: ref v208,
                                    cond: ref v209,
                                } => {
                                    if let &Opcode::Icmp = v207 {
                                        let v683 = constructor_uextend(ctx, v2.0, v33);
                                        // Rule at src/opts/extends.isle line 12.
                                        returns.extend(Some(v683));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Bmask => {
                                            let v241 = constructor_bmask(ctx, v2.0, v46);
                                            // Rule at src/opts/bitops.isle line 130.
                                            returns.extend(Some(v241));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v681 = constructor_uextend(ctx, v2.0, v46);
                                            // Rule at src/opts/extends.isle line 8.
                                            returns.extend(Some(v681));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Sextend => {
                                            let v682 = constructor_sextend(ctx, v2.0, v46);
                                            // Rule at src/opts/extends.isle line 4.
                                            returns.extend(Some(v682));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                        }
                        let v494 = C::fits_in_64(ctx, v2.0);
                        if let Some(v495) = v494 {
                            let mut v553 = C::inst_data_tupled_etor_returns::default();
                            C::inst_data_tupled_etor(ctx, v33, &mut v553);
                            let mut v553 = v553.into_context_iter();
                            while let Some(v554) = v553.next(ctx) {
                                let v555 = C::iconst_sextend_etor(ctx, v554);
                                if let Some(v556) = v555 {
                                    let v559 = constructor_iconst_s(ctx, v495, v556.1);
                                    let v560 = C::subsume(ctx, v559);
                                    // Rule at src/opts/cprop.isle line 80.
                                    returns.extend(Some(v560));
                                    if returns.len() >= MAX_ISLE_RETURNS {
                                        return;
                                    }
                                }
                            }
                        }
                    }
                    &Opcode::FcvtFromUint => {
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            match &v35.1 {
                                &InstructionData::Unary {
                                    opcode: ref v45,
                                    arg: v46,
                                } => {
                                    match v45 {
                                        &Opcode::Splat => {
                                            let v1025 = C::lane_type(ctx, v2.0);
                                            let v1058 = constructor_fcvt_from_uint(ctx, v1025, v46);
                                            let v1059 = constructor_splat(ctx, v2.0, v1058);
                                            // Rule at src/opts/vector.isle line 7.
                                            returns.extend(Some(v1059));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        &Opcode::Uextend => {
                                            let v183 = constructor_fcvt_from_uint(ctx, v2.0, v46);
                                            // Rule at src/opts/arithmetic.isle line 176.
                                            returns.extend(Some(v183));
                                            if returns.len() >= MAX_ISLE_RETURNS {
                                                return;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                &InstructionData::UnaryImm {
                                    opcode: ref v530,
                                    imm: v531,
                                } => {
                                    if let &Opcode::Iconst = v530 {
                                        match v2.0 {
                                            F32 => {
                                                let v532 = C::u64_from_imm64(ctx, v531);
                                                let v672 = C::f32_from_uint(ctx, v532);
                                                let v673 = constructor_f32const(ctx, F32, v672);
                                                // Rule at src/opts/cprop.isle line 250.
                                                returns.extend(Some(v673));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            F64 => {
                                                let v532 = C::u64_from_imm64(ctx, v531);
                                                let v675 = C::f64_from_uint(ctx, v532);
                                                let v676 = constructor_f64const(ctx, F64, v675);
                                                // Rule at src/opts/cprop.isle line 252.
                                                returns.extend(Some(v676));
                                                if returns.len() >= MAX_ISLE_RETURNS {
                                                    return;
                                                }
                                            }
                                            _ => {}
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                    }
                    &Opcode::FcvtFromSint => {
                        match v2.0 {
                            F32 => {
                                let mut v553 = C::inst_data_tupled_etor_returns::default();
                                C::inst_data_tupled_etor(ctx, v33, &mut v553);
                                let mut v553 = v553.into_context_iter();
                                while let Some(v554) = v553.next(ctx) {
                                    let v555 = C::iconst_sextend_etor(ctx, v554);
                                    if let Some(v556) = v555 {
                                        let v677 = C::f32_from_sint(ctx, v556.1);
                                        let v678 = constructor_f32const(ctx, F32, v677);
                                        // Rule at src/opts/cprop.isle line 254.
                                        returns.extend(Some(v678));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            F64 => {
                                let mut v553 = C::inst_data_tupled_etor_returns::default();
                                C::inst_data_tupled_etor(ctx, v33, &mut v553);
                                let mut v553 = v553.into_context_iter();
                                while let Some(v554) = v553.next(ctx) {
                                    let v555 = C::iconst_sextend_etor(ctx, v554);
                                    if let Some(v556) = v555 {
                                        let v679 = C::f64_from_sint(ctx, v556.1);
                                        let v680 = constructor_f64const(ctx, F64, v679);
                                        // Rule at src/opts/cprop.isle line 256.
                                        returns.extend(Some(v680));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                        let mut v34 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v33, &mut v34);
                        let mut v34 = v34.into_context_iter();
                        while let Some(v35) = v34.next(ctx) {
                            if let &InstructionData::Unary {
                                opcode: ref v45,
                                arg: v46,
                            } = &v35.1
                            {
                                match v45 {
                                    &Opcode::Splat => {
                                        let v1025 = C::lane_type(ctx, v2.0);
                                        let v1060 = constructor_fcvt_from_sint(ctx, v1025, v46);
                                        let v1061 = constructor_splat(ctx, v2.0, v1060);
                                        // Rule at src/opts/vector.isle line 9.
                                        returns.extend(Some(v1061));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        let v184 = constructor_fcvt_from_sint(ctx, v2.0, v46);
                                        // Rule at src/opts/arithmetic.isle line 178.
                                        returns.extend(Some(v184));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::UnaryIeee32 {
                opcode: ref v823,
                imm: v824,
            } => {
                if let &Opcode::F32const = v823 {
                    let v820 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 28.
                    returns.extend(Some(v820));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryIeee64 {
                opcode: ref v825,
                imm: v826,
            } => {
                if let &Opcode::F64const = v825 {
                    let v820 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 30.
                    returns.extend(Some(v820));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            &InstructionData::UnaryImm {
                opcode: ref v821,
                imm: v822,
            } => {
                if let &Opcode::Iconst = v821 {
                    let v820 = C::remat(ctx, arg0);
                    // Rule at src/opts/remat.isle line 26.
                    returns.extend(Some(v820));
                    if returns.len() >= MAX_ISLE_RETURNS {
                        return;
                    }
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term iconst_s.
pub fn constructor_iconst_s<C: Context>(ctx: &mut C, arg0: Type, arg1: i64) -> Value {
    if arg0 == I128 {
        let v12 = constructor_iconst_s(ctx, I64, arg1);
        let v13 = constructor_sextend(ctx, I128, v12);
        // Rule at src/prelude_opt.isle line 83.
        return v13;
    }
    let v2 = C::i64_as_u64(ctx, arg1);
    let v3 = C::ty_umax(ctx, arg0);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::i64_sextend_u64(ctx, arg0, v4);
    let v6 = C::i64_as_u64(ctx, v5);
    let v7 = C::u64_eq(ctx, v2, v6);
    if v7 == true {
        let v8 = C::imm64(ctx, v4);
        let v9 = constructor_iconst(ctx, arg0, v8);
        // Rule at src/prelude_opt.isle line 78.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_s", "src/prelude_opt.isle line 76"
    )
}

// Generated as internal constructor for term iconst_u.
pub fn constructor_iconst_u<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Value {
    if arg0 == I128 {
        let v8 = constructor_iconst_u(ctx, I64, arg1);
        let v9 = constructor_uextend(ctx, I128, v8);
        // Rule at src/prelude_opt.isle line 96.
        return v9;
    }
    let v2 = C::ty_umax(ctx, arg0);
    let v3 = C::u64_le(ctx, arg1, v2);
    if v3 == true {
        let v4 = C::imm64(ctx, arg1);
        let v5 = constructor_iconst(ctx, arg0, v4);
        // Rule at src/prelude_opt.isle line 93.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iconst_u", "src/prelude_opt.isle line 91"
    )
}

// Generated as internal constructor for term uextend_maybe.
pub fn constructor_uextend_maybe<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src/prelude_opt.isle line 116.
        return arg1;
    }
    let v2 = constructor_uextend(ctx, arg0, arg1);
    // Rule at src/prelude_opt.isle line 115.
    return v2;
}

// Generated as internal constructor for term sextend_maybe.
pub fn constructor_sextend_maybe<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    if arg0 == v3 {
        // Rule at src/prelude_opt.isle line 122.
        return arg1;
    }
    let v2 = constructor_sextend(ctx, arg0, arg1);
    // Rule at src/prelude_opt.isle line 121.
    return v2;
}

// Generated as internal constructor for term truthy.
pub fn constructor_truthy<C: Context>(
    ctx: &mut C,
    arg0: Value,
    returns: &mut (impl Extend<Value> + Length),
) -> () {
    let mut v1 = C::inst_data_etor_returns::default();
    C::inst_data_etor(ctx, arg0, &mut v1);
    let mut v1 = v1.into_context_iter();
    while let Some(v2) = v1.next(ctx) {
        match &v2.1 {
            &InstructionData::Binary {
                opcode: ref v7,
                args: ref v8,
            } => {
                match v7 {
                    &Opcode::Rotl => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 109.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Rotr => {
                        let v9 = C::unpack_value_array_2(ctx, v8);
                        // Rule at src/opts/bitops.isle line 110.
                        returns.extend(Some(v9.0));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v33,
                args: ref v34,
                cond: ref v35,
            } => {
                if let &Opcode::Icmp = v33 {
                    if let &IntCC::NotEqual = v35 {
                        let v36 = C::unpack_value_array_2(ctx, v34);
                        let mut v39 = C::inst_data_etor_returns::default();
                        C::inst_data_etor(ctx, v36.1, &mut v39);
                        let mut v39 = v39.into_context_iter();
                        while let Some(v40) = v39.next(ctx) {
                            if let &InstructionData::UnaryImm {
                                opcode: ref v43,
                                imm: v44,
                            } = &v40.1
                            {
                                if let &Opcode::Iconst = v43 {
                                    let v45 = C::u64_from_imm64(ctx, v44);
                                    if v45 == 0x0 {
                                        // Rule at src/opts/bitops.isle line 113.
                                        returns.extend(Some(v36.0));
                                        if returns.len() >= MAX_ISLE_RETURNS {
                                            return;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Ternary {
                opcode: ref v12,
                args: ref v13,
            } => {
                if let &Opcode::Select = v12 {
                    let v14 = C::unpack_value_array_3(ctx, v13);
                    let mut v18 = C::inst_data_etor_returns::default();
                    C::inst_data_etor(ctx, v14.1, &mut v18);
                    let mut v18 = v18.into_context_iter();
                    while let Some(v19) = v18.next(ctx) {
                        if let &InstructionData::UnaryImm {
                            opcode: ref v22,
                            imm: v23,
                        } = &v19.1
                        {
                            if let &Opcode::Iconst = v22 {
                                let v24 = C::u64_from_imm64(ctx, v23);
                                let v25 = C::u64_is_zero(ctx, v24);
                                if v25 == false {
                                    let mut v26 = C::inst_data_etor_returns::default();
                                    C::inst_data_etor(ctx, v14.2, &mut v26);
                                    let mut v26 = v26.into_context_iter();
                                    while let Some(v27) = v26.next(ctx) {
                                        if let &InstructionData::UnaryImm {
                                            opcode: ref v30,
                                            imm: v31,
                                        } = &v27.1
                                        {
                                            if let &Opcode::Iconst = v30 {
                                                let v32 = C::u64_from_imm64(ctx, v31);
                                                if v32 == 0x0 {
                                                    // Rule at src/opts/bitops.isle line 111.
                                                    returns.extend(Some(v14.0));
                                                    if returns.len() >= MAX_ISLE_RETURNS {
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            &InstructionData::Unary {
                opcode: ref v5,
                arg: v6,
            } => {
                match v5 {
                    &Opcode::Ineg => {
                        // Rule at src/opts/bitops.isle line 105.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bitrev => {
                        // Rule at src/opts/bitops.isle line 107.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bswap => {
                        // Rule at src/opts/bitops.isle line 106.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Popcnt => {
                        // Rule at src/opts/bitops.isle line 108.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Bmask => {
                        // Rule at src/opts/bitops.isle line 104.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Uextend => {
                        // Rule at src/opts/bitops.isle line 103.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    &Opcode::Sextend => {
                        // Rule at src/opts/bitops.isle line 102.
                        returns.extend(Some(v6));
                        if returns.len() >= MAX_ISLE_RETURNS {
                            return;
                        }
                    }
                    _ => {}
                }
            }
            _ => {}
        }
    }
    return;
}

// Generated as internal constructor for term splat8.
pub fn constructor_splat8<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x8);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat16(ctx, v3);
    // Rule at src/opts/cprop.isle line 203.
    return v4;
}

// Generated as internal constructor for term splat16.
pub fn constructor_splat16<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x10);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = constructor_splat32(ctx, v3);
    // Rule at src/opts/cprop.isle line 205.
    return v4;
}

// Generated as internal constructor for term splat32.
pub fn constructor_splat32<C: Context>(ctx: &mut C, arg0: u64) -> Constant {
    let v2 = C::u64_shl(ctx, arg0, 0x20);
    let v3 = C::u64_or(ctx, arg0, v2);
    let v4 = C::splat64(ctx, v3);
    // Rule at src/opts/cprop.isle line 207.
    return v4;
}

// Generated as internal constructor for term intcc_comparable.
pub fn constructor_intcc_comparable<C: Context>(
    ctx: &mut C,
    arg0: &IntCC,
    arg1: &IntCC,
) -> Option<bool> {
    let v2 = constructor_intcc_class(ctx, arg0);
    let v3 = constructor_intcc_class(ctx, arg1);
    let v4 = C::u64_and(ctx, v2, v3);
    let v5 = C::u64_is_zero(ctx, v4);
    if v5 == false {
        let v7 = C::u64_eq(ctx, 0x2, v4);
        // Rule at src/opts/icmp.isle line 157.
        return Some(v7);
    }
    None
}

// Generated as internal constructor for term decompose_intcc.
pub fn constructor_decompose_intcc<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 162.
            return 0x1;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 171.
            return 0x6;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 168.
            return 0x4;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 170.
            return 0x5;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 164.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 166.
            return 0x3;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 167.
            return 0x4;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 169.
            return 0x5;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 163.
            return 0x2;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 165.
            return 0x3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "decompose_intcc", "src/opts/icmp.isle line 161"
    )
}

// Generated as internal constructor for term compose_icmp.
pub fn constructor_compose_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u64,
    arg2: bool,
    arg3: Value,
    arg4: Value,
) -> Value {
    match arg1 {
        0x0 => {
            let v6 = constructor_iconst_u(ctx, arg0, 0x0);
            let v7 = C::subsume(ctx, v6);
            // Rule at src/opts/icmp.isle line 174.
            return v7;
        }
        0x1 => {
            let v9 = constructor_icmp(ctx, arg0, &IntCC::Equal, arg3, arg4);
            // Rule at src/opts/icmp.isle line 175.
            return v9;
        }
        0x2 => {
            match arg2 {
                true => {
                    let v13 = constructor_icmp(ctx, arg0, &IntCC::SignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 177.
                    return v13;
                }
                false => {
                    let v11 = constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 176.
                    return v11;
                }
                _ => {}
            }
        }
        0x3 => {
            match arg2 {
                true => {
                    let v17 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 179.
                    return v17;
                }
                false => {
                    let v15 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedLessThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 178.
                    return v15;
                }
                _ => {}
            }
        }
        0x4 => {
            match arg2 {
                true => {
                    let v21 = constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 181.
                    return v21;
                }
                false => {
                    let v19 = constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThan, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 180.
                    return v19;
                }
                _ => {}
            }
        }
        0x5 => {
            match arg2 {
                true => {
                    let v25 =
                        constructor_icmp(ctx, arg0, &IntCC::SignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 183.
                    return v25;
                }
                false => {
                    let v23 =
                        constructor_icmp(ctx, arg0, &IntCC::UnsignedGreaterThanOrEqual, arg3, arg4);
                    // Rule at src/opts/icmp.isle line 182.
                    return v23;
                }
                _ => {}
            }
        }
        0x6 => {
            let v27 = constructor_icmp(ctx, arg0, &IntCC::NotEqual, arg3, arg4);
            // Rule at src/opts/icmp.isle line 184.
            return v27;
        }
        0x7 => {
            let v29 = constructor_iconst_u(ctx, arg0, 0x1);
            let v30 = C::subsume(ctx, v29);
            // Rule at src/opts/icmp.isle line 185.
            return v30;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "compose_icmp", "src/opts/icmp.isle line 173"
    )
}

// Generated as internal constructor for term intcc_class.
pub fn constructor_intcc_class<C: Context>(ctx: &mut C, arg0: &IntCC) -> u64 {
    match arg0 {
        &IntCC::Equal => {
            // Rule at src/opts/icmp.isle line 196.
            return 0x3;
        }
        &IntCC::NotEqual => {
            // Rule at src/opts/icmp.isle line 197.
            return 0x3;
        }
        &IntCC::SignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 194.
            return 0x2;
        }
        &IntCC::SignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 195.
            return 0x2;
        }
        &IntCC::SignedLessThan => {
            // Rule at src/opts/icmp.isle line 192.
            return 0x2;
        }
        &IntCC::SignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 193.
            return 0x2;
        }
        &IntCC::UnsignedGreaterThan => {
            // Rule at src/opts/icmp.isle line 190.
            return 0x1;
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            // Rule at src/opts/icmp.isle line 191.
            return 0x1;
        }
        &IntCC::UnsignedLessThan => {
            // Rule at src/opts/icmp.isle line 188.
            return 0x1;
        }
        &IntCC::UnsignedLessThanOrEqual => {
            // Rule at src/opts/icmp.isle line 189.
            return 0x1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "intcc_class", "src/opts/icmp.isle line 187"
    )
}

// Generated as internal constructor for term shift_amt_to_type.
pub fn constructor_shift_amt_to_type<C: Context>(ctx: &mut C, arg0: u64) -> Option<Type> {
    match arg0 {
        0x8 => {
            // Rule at src/opts/shifts.isle line 94.
            return Some(I8);
        }
        0x10 => {
            // Rule at src/opts/shifts.isle line 95.
            return Some(I16);
        }
        0x20 => {
            // Rule at src/opts/shifts.isle line 96.
            return Some(I32);
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term iadd_uextend.
pub fn constructor_iadd_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_iadd(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 215.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_iadd(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 212.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_iadd(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 210.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "iadd_uextend", "src/opts/shifts.isle line 209"
    )
}

// Generated as internal constructor for term isub_uextend.
pub fn constructor_isub_uextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Value {
    let v3 = C::value_type(ctx, arg1);
    let v6 = C::ty_bits_u64(ctx, v3);
    let v1 = C::value_type(ctx, arg0);
    let v5 = C::ty_bits_u64(ctx, v1);
    let v10 = C::u64_lt(ctx, v6, v5);
    if v10 == true {
        let v11 = constructor_uextend(ctx, v1, arg1);
        let v12 = constructor_isub(ctx, v1, arg0, v11);
        // Rule at src/opts/shifts.isle line 227.
        return v12;
    }
    let v7 = C::u64_lt(ctx, v5, v6);
    if v7 == true {
        let v8 = constructor_uextend(ctx, v3, arg0);
        let v9 = constructor_isub(ctx, v3, v8, arg1);
        // Rule at src/opts/shifts.isle line 224.
        return v9;
    }
    if v1 == v3 {
        let v4 = constructor_isub(ctx, v1, arg0, arg1);
        // Rule at src/opts/shifts.isle line 222.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "isub_uextend", "src/opts/shifts.isle line 221"
    )
}

// Generated as internal constructor for term func_addr.
pub fn constructor_func_addr<C: Context>(ctx: &mut C, arg0: Type, arg1: FuncRef) -> Value {
    let v3 = InstructionData::FuncAddr {
        opcode: Opcode::FuncAddr,
        func_ref: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 362.
    return v4;
}

// Generated as internal constructor for term splat.
pub fn constructor_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Splat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 371.
    return v4;
}

// Generated as internal constructor for term swizzle.
pub fn constructor_swizzle<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Swizzle,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 380.
    return v6;
}

// Generated as internal constructor for term x86_pshufb.
pub fn constructor_x86_pshufb<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pshufb,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 389.
    return v6;
}

// Generated as internal constructor for term insertlane.
pub fn constructor_insertlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Uimm8,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::TernaryImm8 {
        opcode: Opcode::Insertlane,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 398.
    return v7;
}

// Generated as internal constructor for term extractlane.
pub fn constructor_extractlane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::Extractlane,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 407.
    return v5;
}

// Generated as internal constructor for term smin.
pub fn constructor_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 416.
    return v6;
}

// Generated as internal constructor for term umin.
pub fn constructor_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 425.
    return v6;
}

// Generated as internal constructor for term smax.
pub fn constructor_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 434.
    return v6;
}

// Generated as internal constructor for term umax.
pub fn constructor_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 443.
    return v6;
}

// Generated as internal constructor for term avg_round.
pub fn constructor_avg_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::AvgRound,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 452.
    return v6;
}

// Generated as internal constructor for term uadd_sat.
pub fn constructor_uadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 461.
    return v6;
}

// Generated as internal constructor for term sadd_sat.
pub fn constructor_sadd_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SaddSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 470.
    return v6;
}

// Generated as internal constructor for term usub_sat.
pub fn constructor_usub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::UsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 479.
    return v6;
}

// Generated as internal constructor for term ssub_sat.
pub fn constructor_ssub_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SsubSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 488.
    return v6;
}

// Generated as internal constructor for term load.
pub fn constructor_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Load,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 497.
    return v6;
}

// Generated as internal constructor for term uload8.
pub fn constructor_uload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 506.
    return v6;
}

// Generated as internal constructor for term sload8.
pub fn constructor_sload8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 515.
    return v6;
}

// Generated as internal constructor for term uload16.
pub fn constructor_uload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 524.
    return v6;
}

// Generated as internal constructor for term sload16.
pub fn constructor_sload16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 533.
    return v6;
}

// Generated as internal constructor for term uload32.
pub fn constructor_uload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 542.
    return v6;
}

// Generated as internal constructor for term sload32.
pub fn constructor_sload32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 551.
    return v6;
}

// Generated as internal constructor for term uload8x8.
pub fn constructor_uload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 560.
    return v6;
}

// Generated as internal constructor for term sload8x8.
pub fn constructor_sload8x8<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload8x8,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 569.
    return v6;
}

// Generated as internal constructor for term uload16x4.
pub fn constructor_uload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 578.
    return v6;
}

// Generated as internal constructor for term sload16x4.
pub fn constructor_sload16x4<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload16x4,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 587.
    return v6;
}

// Generated as internal constructor for term uload32x2.
pub fn constructor_uload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Uload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 596.
    return v6;
}

// Generated as internal constructor for term sload32x2.
pub fn constructor_sload32x2<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::Load {
        opcode: Opcode::Sload32x2,
        arg: arg2,
        flags: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 605.
    return v6;
}

// Generated as internal constructor for term stack_load.
pub fn constructor_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackLoad,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 614.
    return v5;
}

// Generated as internal constructor for term stack_addr.
pub fn constructor_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Value {
    let v4 = InstructionData::StackLoad {
        opcode: Opcode::StackAddr,
        stack_slot: arg1,
        offset: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 623.
    return v5;
}

// Generated as internal constructor for term dynamic_stack_load.
pub fn constructor_dynamic_stack_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackLoad,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 632.
    return v4;
}

// Generated as internal constructor for term dynamic_stack_addr.
pub fn constructor_dynamic_stack_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: DynamicStackSlot,
) -> Value {
    let v3 = InstructionData::DynamicStackLoad {
        opcode: Opcode::DynamicStackAddr,
        dynamic_stack_slot: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 641.
    return v4;
}

// Generated as internal constructor for term global_value.
pub fn constructor_global_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::GlobalValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 650.
    return v4;
}

// Generated as internal constructor for term symbol_value.
pub fn constructor_symbol_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::SymbolValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 659.
    return v4;
}

// Generated as internal constructor for term tls_value.
pub fn constructor_tls_value<C: Context>(ctx: &mut C, arg0: Type, arg1: GlobalValue) -> Value {
    let v3 = InstructionData::UnaryGlobalValue {
        opcode: Opcode::TlsValue,
        global_value: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 668.
    return v4;
}

// Generated as internal constructor for term get_pinned_reg.
pub fn constructor_get_pinned_reg<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetPinnedReg,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 677.
    return v3;
}

// Generated as internal constructor for term get_frame_pointer.
pub fn constructor_get_frame_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetFramePointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 686.
    return v3;
}

// Generated as internal constructor for term get_stack_pointer.
pub fn constructor_get_stack_pointer<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetStackPointer,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 695.
    return v3;
}

// Generated as internal constructor for term get_return_address.
pub fn constructor_get_return_address<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::GetReturnAddress,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 704.
    return v3;
}

// Generated as internal constructor for term table_addr.
pub fn constructor_table_addr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Table,
    arg2: Value,
    arg3: Offset32,
) -> Value {
    let v5 = InstructionData::TableAddr {
        opcode: Opcode::TableAddr,
        arg: arg2,
        table: arg1,
        offset: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 713.
    return v6;
}

// Generated as internal constructor for term iconst.
pub fn constructor_iconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Imm64) -> Value {
    let v3 = InstructionData::UnaryImm {
        opcode: Opcode::Iconst,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 722.
    return v4;
}

// Generated as internal constructor for term f32const.
pub fn constructor_f32const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee32) -> Value {
    let v3 = InstructionData::UnaryIeee32 {
        opcode: Opcode::F32const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 731.
    return v4;
}

// Generated as internal constructor for term f64const.
pub fn constructor_f64const<C: Context>(ctx: &mut C, arg0: Type, arg1: Ieee64) -> Value {
    let v3 = InstructionData::UnaryIeee64 {
        opcode: Opcode::F64const,
        imm: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 740.
    return v4;
}

// Generated as internal constructor for term vconst.
pub fn constructor_vconst<C: Context>(ctx: &mut C, arg0: Type, arg1: Constant) -> Value {
    let v3 = InstructionData::UnaryConst {
        opcode: Opcode::Vconst,
        constant_handle: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 749.
    return v4;
}

// Generated as internal constructor for term shuffle.
pub fn constructor_shuffle<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Immediate,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::Shuffle {
        opcode: Opcode::Shuffle,
        args: v5.clone(),
        imm: arg3,
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 758.
    return v7;
}

// Generated as internal constructor for term null.
pub fn constructor_null<C: Context>(ctx: &mut C, arg0: Type) -> Value {
    let v2 = InstructionData::NullAry {
        opcode: Opcode::Null,
    };
    let v3 = C::make_inst_ctor(ctx, arg0, &v2);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 767.
    return v3;
}

// Generated as internal constructor for term select.
pub fn constructor_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Select,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 776.
    return v7;
}

// Generated as internal constructor for term select_spectre_guard.
pub fn constructor_select_spectre_guard<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::SelectSpectreGuard,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 785.
    return v7;
}

// Generated as internal constructor for term bitselect.
pub fn constructor_bitselect<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Bitselect,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 794.
    return v7;
}

// Generated as internal constructor for term x86_blendv.
pub fn constructor_x86_blendv<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::X86Blendv,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 803.
    return v7;
}

// Generated as internal constructor for term vany_true.
pub fn constructor_vany_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VanyTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 812.
    return v4;
}

// Generated as internal constructor for term vall_true.
pub fn constructor_vall_true<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VallTrue,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 821.
    return v4;
}

// Generated as internal constructor for term vhigh_bits.
pub fn constructor_vhigh_bits<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::VhighBits,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 830.
    return v4;
}

// Generated as internal constructor for term icmp.
pub fn constructor_icmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::IntCompare {
        opcode: Opcode::Icmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 839.
    return v7;
}

// Generated as internal constructor for term icmp_imm.
pub fn constructor_icmp_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &IntCC,
    arg2: Value,
    arg3: Imm64,
) -> Value {
    let v5 = InstructionData::IntCompareImm {
        opcode: Opcode::IcmpImm,
        arg: arg2,
        cond: arg1.clone(),
        imm: arg3,
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 848.
    return v6;
}

// Generated as internal constructor for term iadd.
pub fn constructor_iadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 857.
    return v6;
}

// Generated as internal constructor for term isub.
pub fn constructor_isub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Isub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 866.
    return v6;
}

// Generated as internal constructor for term ineg.
pub fn constructor_ineg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ineg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 875.
    return v4;
}

// Generated as internal constructor for term iabs.
pub fn constructor_iabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Iabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 884.
    return v4;
}

// Generated as internal constructor for term imul.
pub fn constructor_imul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Imul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 893.
    return v6;
}

// Generated as internal constructor for term umulhi.
pub fn constructor_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Umulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 902.
    return v6;
}

// Generated as internal constructor for term smulhi.
pub fn constructor_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Smulhi,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 911.
    return v6;
}

// Generated as internal constructor for term sqmul_round_sat.
pub fn constructor_sqmul_round_sat<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::SqmulRoundSat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 920.
    return v6;
}

// Generated as internal constructor for term x86_pmulhrsw.
pub fn constructor_x86_pmulhrsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmulhrsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 929.
    return v6;
}

// Generated as internal constructor for term udiv.
pub fn constructor_udiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Udiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 938.
    return v6;
}

// Generated as internal constructor for term sdiv.
pub fn constructor_sdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 947.
    return v6;
}

// Generated as internal constructor for term urem.
pub fn constructor_urem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Urem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 956.
    return v6;
}

// Generated as internal constructor for term srem.
pub fn constructor_srem<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Srem,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 965.
    return v6;
}

// Generated as internal constructor for term iadd_imm.
pub fn constructor_iadd_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IaddImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 974.
    return v5;
}

// Generated as internal constructor for term imul_imm.
pub fn constructor_imul_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::ImulImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 983.
    return v5;
}

// Generated as internal constructor for term udiv_imm.
pub fn constructor_udiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 992.
    return v5;
}

// Generated as internal constructor for term sdiv_imm.
pub fn constructor_sdiv_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SdivImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1001.
    return v5;
}

// Generated as internal constructor for term urem_imm.
pub fn constructor_urem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1010.
    return v5;
}

// Generated as internal constructor for term srem_imm.
pub fn constructor_srem_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SremImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1019.
    return v5;
}

// Generated as internal constructor for term irsub_imm.
pub fn constructor_irsub_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IrsubImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1028.
    return v5;
}

// Generated as internal constructor for term iadd_cin.
pub fn constructor_iadd_cin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IaddCin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1037.
    return v7;
}

// Generated as internal constructor for term uadd_overflow_trap.
pub fn constructor_uadd_overflow_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: &TrapCode,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v6 = InstructionData::IntAddTrap {
        opcode: Opcode::UaddOverflowTrap,
        args: v5.clone(),
        code: arg3.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1046.
    return v7;
}

// Generated as internal constructor for term isub_bin.
pub fn constructor_isub_bin<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::IsubBin,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1055.
    return v7;
}

// Generated as internal constructor for term band.
pub fn constructor_band<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Band,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1064.
    return v6;
}

// Generated as internal constructor for term bor.
pub fn constructor_bor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1073.
    return v6;
}

// Generated as internal constructor for term bxor.
pub fn constructor_bxor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Bxor,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1082.
    return v6;
}

// Generated as internal constructor for term bnot.
pub fn constructor_bnot<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bnot,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1091.
    return v4;
}

// Generated as internal constructor for term band_not.
pub fn constructor_band_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BandNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1100.
    return v6;
}

// Generated as internal constructor for term bor_not.
pub fn constructor_bor_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1109.
    return v6;
}

// Generated as internal constructor for term bxor_not.
pub fn constructor_bxor_not<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::BxorNot,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1118.
    return v6;
}

// Generated as internal constructor for term band_imm.
pub fn constructor_band_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BandImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1127.
    return v5;
}

// Generated as internal constructor for term bor_imm.
pub fn constructor_bor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Imm64) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1136.
    return v5;
}

// Generated as internal constructor for term bxor_imm.
pub fn constructor_bxor_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::BxorImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1145.
    return v5;
}

// Generated as internal constructor for term rotl.
pub fn constructor_rotl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1154.
    return v6;
}

// Generated as internal constructor for term rotr.
pub fn constructor_rotr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Rotr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1163.
    return v6;
}

// Generated as internal constructor for term rotl_imm.
pub fn constructor_rotl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1172.
    return v5;
}

// Generated as internal constructor for term rotr_imm.
pub fn constructor_rotr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::RotrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1181.
    return v5;
}

// Generated as internal constructor for term ishl.
pub fn constructor_ishl<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ishl,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1190.
    return v6;
}

// Generated as internal constructor for term ushr.
pub fn constructor_ushr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Ushr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1199.
    return v6;
}

// Generated as internal constructor for term sshr.
pub fn constructor_sshr<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Sshr,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1208.
    return v6;
}

// Generated as internal constructor for term ishl_imm.
pub fn constructor_ishl_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::IshlImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1217.
    return v5;
}

// Generated as internal constructor for term ushr_imm.
pub fn constructor_ushr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::UshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1226.
    return v5;
}

// Generated as internal constructor for term sshr_imm.
pub fn constructor_sshr_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Imm64,
) -> Value {
    let v4 = InstructionData::BinaryImm64 {
        opcode: Opcode::SshrImm,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1235.
    return v5;
}

// Generated as internal constructor for term bitrev.
pub fn constructor_bitrev<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bitrev,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1244.
    return v4;
}

// Generated as internal constructor for term clz.
pub fn constructor_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Clz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1253.
    return v4;
}

// Generated as internal constructor for term cls.
pub fn constructor_cls<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Cls,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1262.
    return v4;
}

// Generated as internal constructor for term ctz.
pub fn constructor_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ctz,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1271.
    return v4;
}

// Generated as internal constructor for term bswap.
pub fn constructor_bswap<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bswap,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1280.
    return v4;
}

// Generated as internal constructor for term popcnt.
pub fn constructor_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Popcnt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1289.
    return v4;
}

// Generated as internal constructor for term fcmp.
pub fn constructor_fcmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FloatCC,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_2_ctor(ctx, arg2, arg3);
    let v6 = InstructionData::FloatCompare {
        opcode: Opcode::Fcmp,
        args: v5.clone(),
        cond: arg1.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1298.
    return v7;
}

// Generated as internal constructor for term fadd.
pub fn constructor_fadd<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fadd,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1307.
    return v6;
}

// Generated as internal constructor for term fsub.
pub fn constructor_fsub<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fsub,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1316.
    return v6;
}

// Generated as internal constructor for term fmul.
pub fn constructor_fmul<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmul,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1325.
    return v6;
}

// Generated as internal constructor for term fdiv.
pub fn constructor_fdiv<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fdiv,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1334.
    return v6;
}

// Generated as internal constructor for term sqrt.
pub fn constructor_sqrt<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sqrt,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1343.
    return v4;
}

// Generated as internal constructor for term fma.
pub fn constructor_fma<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
    arg3: Value,
) -> Value {
    let v5 = &C::value_array_3_ctor(ctx, arg1, arg2, arg3);
    let v6 = InstructionData::Ternary {
        opcode: Opcode::Fma,
        args: v5.clone(),
    };
    let v7 = C::make_inst_ctor(ctx, arg0, &v6);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1352.
    return v7;
}

// Generated as internal constructor for term fneg.
pub fn constructor_fneg<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fneg,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1361.
    return v4;
}

// Generated as internal constructor for term fabs.
pub fn constructor_fabs<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fabs,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1370.
    return v4;
}

// Generated as internal constructor for term fcopysign.
pub fn constructor_fcopysign<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fcopysign,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1379.
    return v6;
}

// Generated as internal constructor for term fmin.
pub fn constructor_fmin<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmin,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1388.
    return v6;
}

// Generated as internal constructor for term fmax.
pub fn constructor_fmax<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Fmax,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1397.
    return v6;
}

// Generated as internal constructor for term ceil.
pub fn constructor_ceil<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ceil,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1406.
    return v4;
}

// Generated as internal constructor for term floor.
pub fn constructor_floor<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Floor,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1415.
    return v4;
}

// Generated as internal constructor for term trunc.
pub fn constructor_trunc<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Trunc,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1424.
    return v4;
}

// Generated as internal constructor for term nearest.
pub fn constructor_nearest<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Nearest,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1433.
    return v4;
}

// Generated as internal constructor for term is_null.
pub fn constructor_is_null<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsNull,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1442.
    return v4;
}

// Generated as internal constructor for term is_invalid.
pub fn constructor_is_invalid<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::IsInvalid,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1451.
    return v4;
}

// Generated as internal constructor for term bitcast.
pub fn constructor_bitcast<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::Bitcast,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1460.
    return v5;
}

// Generated as internal constructor for term scalar_to_vector.
pub fn constructor_scalar_to_vector<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::ScalarToVector,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1469.
    return v4;
}

// Generated as internal constructor for term bmask.
pub fn constructor_bmask<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Bmask,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1478.
    return v4;
}

// Generated as internal constructor for term ireduce.
pub fn constructor_ireduce<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Ireduce,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1487.
    return v4;
}

// Generated as internal constructor for term snarrow.
pub fn constructor_snarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Snarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1496.
    return v6;
}

// Generated as internal constructor for term unarrow.
pub fn constructor_unarrow<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Unarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1505.
    return v6;
}

// Generated as internal constructor for term uunarrow.
pub fn constructor_uunarrow<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Uunarrow,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1514.
    return v6;
}

// Generated as internal constructor for term swiden_low.
pub fn constructor_swiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1523.
    return v4;
}

// Generated as internal constructor for term swiden_high.
pub fn constructor_swiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::SwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1532.
    return v4;
}

// Generated as internal constructor for term uwiden_low.
pub fn constructor_uwiden_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1541.
    return v4;
}

// Generated as internal constructor for term uwiden_high.
pub fn constructor_uwiden_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::UwidenHigh,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1550.
    return v4;
}

// Generated as internal constructor for term iadd_pairwise.
pub fn constructor_iadd_pairwise<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::IaddPairwise,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1559.
    return v6;
}

// Generated as internal constructor for term x86_pmaddubsw.
pub fn constructor_x86_pmaddubsw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Value,
) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::X86Pmaddubsw,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1568.
    return v6;
}

// Generated as internal constructor for term uextend.
pub fn constructor_uextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Uextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1577.
    return v4;
}

// Generated as internal constructor for term sextend.
pub fn constructor_sextend<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Sextend,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1586.
    return v4;
}

// Generated as internal constructor for term fpromote.
pub fn constructor_fpromote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fpromote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1595.
    return v4;
}

// Generated as internal constructor for term fdemote.
pub fn constructor_fdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1604.
    return v4;
}

// Generated as internal constructor for term fvdemote.
pub fn constructor_fvdemote<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::Fvdemote,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1613.
    return v4;
}

// Generated as internal constructor for term fvpromote_low.
pub fn constructor_fvpromote_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FvpromoteLow,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1622.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint.
pub fn constructor_fcvt_to_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1631.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint.
pub fn constructor_fcvt_to_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1640.
    return v4;
}

// Generated as internal constructor for term fcvt_to_uint_sat.
pub fn constructor_fcvt_to_uint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToUintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1649.
    return v4;
}

// Generated as internal constructor for term fcvt_to_sint_sat.
pub fn constructor_fcvt_to_sint_sat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtToSintSat,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1658.
    return v4;
}

// Generated as internal constructor for term x86_cvtt2dq.
pub fn constructor_x86_cvtt2dq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::X86Cvtt2dq,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1667.
    return v4;
}

// Generated as internal constructor for term fcvt_from_uint.
pub fn constructor_fcvt_from_uint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromUint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1676.
    return v4;
}

// Generated as internal constructor for term fcvt_from_sint.
pub fn constructor_fcvt_from_sint<C: Context>(ctx: &mut C, arg0: Type, arg1: Value) -> Value {
    let v3 = InstructionData::Unary {
        opcode: Opcode::FcvtFromSint,
        arg: arg1,
    };
    let v4 = C::make_inst_ctor(ctx, arg0, &v3);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1685.
    return v4;
}

// Generated as internal constructor for term iconcat.
pub fn constructor_iconcat<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: Value) -> Value {
    let v4 = &C::value_array_2_ctor(ctx, arg1, arg2);
    let v5 = InstructionData::Binary {
        opcode: Opcode::Iconcat,
        args: v4.clone(),
    };
    let v6 = C::make_inst_ctor(ctx, arg0, &v5);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1694.
    return v6;
}

// Generated as internal constructor for term atomic_rmw.
pub fn constructor_atomic_rmw<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: &AtomicRmwOp,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_2_ctor(ctx, arg3, arg4);
    let v7 = InstructionData::AtomicRmw {
        opcode: Opcode::AtomicRmw,
        args: v6.clone(),
        flags: arg1,
        op: arg2.clone(),
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1703.
    return v8;
}

// Generated as internal constructor for term atomic_cas.
pub fn constructor_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Value,
    arg4: Value,
) -> Value {
    let v6 = &C::value_array_3_ctor(ctx, arg2, arg3, arg4);
    let v7 = InstructionData::AtomicCas {
        opcode: Opcode::AtomicCas,
        args: v6.clone(),
        flags: arg1,
    };
    let v8 = C::make_inst_ctor(ctx, arg0, &v7);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1712.
    return v8;
}

// Generated as internal constructor for term atomic_load.
pub fn constructor_atomic_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
) -> Value {
    let v4 = InstructionData::LoadNoOffset {
        opcode: Opcode::AtomicLoad,
        arg: arg2,
        flags: arg1,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1721.
    return v5;
}

// Generated as internal constructor for term extract_vector.
pub fn constructor_extract_vector<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Value,
    arg2: Uimm8,
) -> Value {
    let v4 = InstructionData::BinaryImm8 {
        opcode: Opcode::ExtractVector,
        arg: arg1,
        imm: arg2,
    };
    let v5 = C::make_inst_ctor(ctx, arg0, &v4);
    // Rule at /home/harshpreet-singh/Documents/2024/may/custom-ledger/archive/target/debug/build/cranelift-codegen-b5d1315308dcd1fb/out/clif_opt.isle line 1730.
    return v5;
}
